{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/context/modulation.context.tsx\";\nimport React, { useState } from 'react';\nexport var ModulationContext = React.createContext({});\nexport var ModulationProvider = function ModulationProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedFields = _useState2[0],\n      setSelectedFields = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedProducts = _useState4[0],\n      setSelectedProducts = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedSlot = _useState6[0],\n      setSelectedSlot = _useState6[1];\n\n  var addField = function addField(field) {\n    setSelectedFields([].concat(_toConsumableArray(selectedFields), [field]));\n    console.log(selectedFields);\n  };\n\n  var removeField = function removeField(field) {\n    setSelectedFields(_toConsumableArray(selectedFields.filter(function (f) {\n      return f.id != field.id;\n    })));\n    console.log(selectedFields);\n  };\n\n  var cleanFields = function cleanFields() {\n    setSelectedFields([]);\n  };\n\n  return React.createElement(ModulationContext.Provider, {\n    value: {\n      addField: addField,\n      removeField: removeField,\n      cleanFields: cleanFields\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/context/modulation.context.tsx"],"names":["React","useState","ModulationContext","createContext","ModulationProvider","children","selectedFields","setSelectedFields","selectedProducts","setSelectedProducts","selectedSlot","setSelectedSlot","addField","field","console","log","removeField","filter","f","id","cleanFields"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAaA,OAAO,IAAMC,iBAAiB,GAAGF,KAAK,CAACG,aAAN,CAA4C,EAA5C,CAA1B;AAEP,OAAO,IAAMC,kBAA2C,GAAG,SAA9CA,kBAA8C,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBAE7BJ,QAAQ,CAAM,EAAN,CAFqB;AAAA;AAAA,MAElEK,cAFkE;AAAA,MAElDC,iBAFkD;;AAAA,mBAGzBN,QAAQ,CAAM,EAAN,CAHiB;AAAA;AAAA,MAGlEO,gBAHkE;AAAA,MAGhDC,mBAHgD;;AAAA,mBAIjCR,QAAQ,CAAM,EAAN,CAJyB;AAAA;AAAA,MAIlES,YAJkE;AAAA,MAIpDC,eAJoD;;AAKzE,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AACxBN,IAAAA,iBAAiB,8BAAKD,cAAL,IAAqBO,KAArB,GAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,cAAZ;AACH,GAHD;;AAIA,MAAMU,WAAW,GAAG,SAAdA,WAAc,CAACH,KAAD,EAAW;AAC3BN,IAAAA,iBAAiB,oBAAKD,cAAc,CAACW,MAAf,CAAsB,UAACC,CAAD;AAAA,aAAOA,CAAC,CAACC,EAAF,IAAQN,KAAK,CAACM,EAArB;AAAA,KAAtB,CAAL,EAAjB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYT,cAAZ;AACH,GAHD;;AAIA,MAAMc,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAEb,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AAAuB,GAAnD;;AACA,SACI,oBAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAAEK,MAAAA,QAAQ,EAARA,QAAF;AAAYI,MAAAA,WAAW,EAAXA,WAAZ;AAAyBI,MAAAA,WAAW,EAAXA;AAAzB,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKf,QADL,CADJ;AAKH,CAnBM","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, Text, StyleProp, ViewStyle, TextStyle } from 'react-native';\nimport COLORS from '../colors'\n\nexport interface ModulationContextProps {\n    addField: any,\n    removeField: any,\n    cleanFields: any\n}\nexport type selectedFieldsType = {\n\n}\n\nexport const ModulationContext = React.createContext<ModulationContextProps>({});\n\nexport const ModulationProvider: React.FunctionComponent = ({ children }) => {\n\n    const [selectedFields, setSelectedFields] = useState<any>([])\n    const [selectedProducts, setSelectedProducts] = useState<any>([])\n    const [selectedSlot, setSelectedSlot] = useState<any>([])\n    const addField = (field) => {\n        setSelectedFields([...selectedFields, field])\n        console.log(selectedFields)\n    }\n    const removeField = (field) => {\n        setSelectedFields([...selectedFields.filter((f) => f.id != field.id)])\n        console.log(selectedFields)\n    }\n    const cleanFields = () => { setSelectedFields([]) }\n    return (\n        <ModulationContext.Provider value={{ addField, removeField, cleanFields }}>\n            {children}\n        </ModulationContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}