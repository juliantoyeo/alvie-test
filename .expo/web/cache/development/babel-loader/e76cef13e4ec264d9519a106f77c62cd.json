{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  interventions: []\n};\nexport default intervReducer = function intervReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var nextState;\n\n  switch (action.type) {\n    case 'UPDATE_INTERV':\n      nextState = _objectSpread({}, state, {\n        interventions: action.interventionValues\n      });\n      return nextState || state;\n\n    case 'UPDATE_PHYTO_SELECT':\n      nextState = _objectSpread({}, state, {\n        interventions: state.interventions.map(function (intervention) {\n          return intervention.id === action.id ? _objectSpread({}, intervention, {\n            products: action.products\n          }) : intervention;\n        })\n      });\n      return nextState || state;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/store/reducers/intervReducer.js"],"names":["initialState","interventions","intervReducer","state","action","nextState","type","interventionValues","map","intervention","id","products"],"mappings":";;;;;;AAAA,IAAMA,YAAY,GAAG;AACjBC,EAAAA,aAAa,EAAE;AADE,CAArB;AAIA,eAAeC,aAAa,GAAG,yBAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;AAC7D,MAAIC,SAAJ;;AACA,UAAQD,MAAM,CAACE,IAAf;AACI,SAAK,eAAL;AAEID,MAAAA,SAAS,qBACFF,KADE;AAELF,QAAAA,aAAa,EAAEG,MAAM,CAACG;AAFjB,QAAT;AAIA,aAAOF,SAAS,IAAIF,KAApB;;AAEJ,SAAK,qBAAL;AACIE,MAAAA,SAAS,qBACFF,KADE;AAELF,QAAAA,aAAa,EAAEE,KAAK,CAACF,aAAN,CAAoBO,GAApB,CAAwB,UAACC,YAAD,EAAkB;AACrD,iBAAOA,YAAY,CAACC,EAAb,KAAoBN,MAAM,CAACM,EAA3B,qBACAD,YADA;AAEHE,YAAAA,QAAQ,EAAEP,MAAM,CAACO;AAFd,eAGHF,YAHJ;AAIH,SALc;AAFV,QAAT;AASA,aAAOJ,SAAS,IAAIF,KAApB;;AAEJ;AACI,aAAOA,KAAP;AAtBR;AAyBH,CA3BD","sourcesContent":["const initialState = {\n    interventions: [],\n}\n\nexport default intervReducer = (state = initialState, action) => {\n    let nextState\n    switch (action.type) {\n        case 'UPDATE_INTERV':\n\n            nextState = {\n                ...state,\n                interventions: action.interventionValues,\n            }\n            return nextState || state;\n\n        case 'UPDATE_PHYTO_SELECT':\n            nextState = {\n                ...state,\n                interventions: state.interventions.map((intervention) => {\n                    return intervention.id === action.id ? {\n                        ...intervention,\n                        products: action.products,\n                    } : intervention\n                }),\n            }\n            return nextState || state;\n\n        default:\n            return state\n    }\n\n};"]},"metadata":{},"sourceType":"module"}