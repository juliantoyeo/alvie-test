{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/screens/MeteoBriefScreen.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Spinner } from 'native-base';\nimport HygoMeteoPhyto from \"../components/HygoMeteoPhyto\";\nimport i18n from 'i18n-js';\nimport capitalize from \"../utils/capitalize\";\nimport COLORS from \"../colors\";\nimport moment from 'moment-timezone';\nimport { getMeteo } from \"../api/hygoApi\";\n\nvar MeteoBriefScreen = function MeteoBriefScreen(_ref) {\n  var navigation = _ref.navigation;\n  var MONTHS = [i18n.t('months.january'), i18n.t('months.february'), i18n.t('months.march'), i18n.t('months.april'), i18n.t('months.may'), i18n.t('months.june'), i18n.t('months.july'), i18n.t('months.august'), i18n.t('months.september'), i18n.t('months.october'), i18n.t('months.november'), i18n.t('months.december')];\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      meteoData = _useState4[0],\n      setMeteoData = _useState4[1];\n\n  var _useState5 = useState(-1),\n      _useState6 = _slicedToArray(_useState5, 2),\n      lastLoad = _useState6[0],\n      setLastLoad = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      counter = _useState8[0],\n      setCounter = _useState8[1];\n\n  var _useState9 = useState({\n    start: '',\n    end: ''\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      hourRange = _useState10[0],\n      setHourRange = _useState10[1];\n\n  var loadMeteo = function loadMeteo() {\n    var meteo;\n    return _regeneratorRuntime.async(function loadMeteo$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(getMeteo());\n\n          case 2:\n            meteo = _context.sent;\n            setMeteoData(meteo);\n            setHourRange({\n              start: getHour(),\n              end: getHour(true)\n            });\n            setLastLoad(new Date().getTime());\n            setLoading(false);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getDay = function getDay() {\n    var now = new Date();\n    return now.getDate() + \" \" + capitalize(MONTHS[now.getMonth()]);\n  };\n\n  var getHour = function getHour(isEnd) {\n    var now = moment.utc();\n\n    if (now.minutes() >= 30) {\n      now.hours(now.hours() + 1);\n    }\n\n    if (isEnd) {\n      now.hours(now.hours() + 3);\n    }\n\n    now = now.startOf('hour');\n    now = now.tz('Europe/Paris').format('HH');\n    return now;\n  };\n\n  useEffect(function () {\n    var interval;\n    var u1 = navigation.addListener('didFocus', function () {\n      interval = setInterval(function () {\n        setCounter(new Date().getTime());\n      }, 30000);\n      setCounter(new Date().getTime());\n    });\n    var u2 = navigation.addListener('willBlur', function () {\n      clearInterval(interval);\n    });\n    interval = setInterval(function () {\n      setCounter(new Date().getTime());\n    }, 30000);\n    setCounter(new Date().getTime());\n    return function () {\n      u1.remove();\n      u2.remove();\n    };\n  }, []);\n  useEffect(function () {\n    if (counter - lastLoad >= 60000) {\n      loadMeteo();\n    }\n  }, [counter]);\n  return React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.textContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.date,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, getDay()), React.createElement(Text, {\n    style: styles.next_3hours,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, i18n.t('meteo.next_3_hours', {\n    from: hourRange.start,\n    to: hourRange.end\n  }))), React.createElement(View, {\n    style: styles.iconContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.meteoElement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: require(\"../../assets/ICN-Wind.png\"),\n    style: styles.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }), loading && React.createElement(Spinner, {\n    size: 16,\n    color: COLORS.CYAN,\n    style: {\n      height: 16,\n      marginTop: 16\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }), !loading && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.iconText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }, Math.round(meteoData.next3hours.wind) + \" km/h\"), React.createElement(Text, {\n    style: styles.iconText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, Math.round(meteoData.next3hours.gust) + \" km/h\"))), React.createElement(View, {\n    style: styles.meteoElement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: require(\"../../assets/ICN-Rain.png\"),\n    style: styles.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }), loading && React.createElement(Spinner, {\n    size: 16,\n    color: COLORS.CYAN,\n    style: {\n      height: 16,\n      marginTop: 16\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }), !loading && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.iconText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }, Math.round(meteoData.next3hours.precipitation) + \" mm\"), React.createElement(Text, {\n    style: styles.iconText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, Math.round(meteoData.next3hours.probability) + \"%\"))), React.createElement(View, {\n    style: styles.meteoElement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: require(\"../../assets/ICN-Temperature.png\"),\n    style: styles.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }), loading && React.createElement(Spinner, {\n    size: 16,\n    color: COLORS.CYAN,\n    style: {\n      height: 16,\n      marginTop: 16\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }), !loading && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.iconText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  }, Math.round(meteoData.next3hours.mintemp) + \"\\xB0C\"), React.createElement(Text, {\n    style: styles.iconText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }, Math.round(meteoData.next3hours.maxtemp) + \"\\xB0C\"))), React.createElement(View, {\n    style: styles.meteoElement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: require(\"../../assets/ICN-Hygro.png\"),\n    style: styles.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }), loading && React.createElement(Spinner, {\n    size: 16,\n    color: COLORS.CYAN,\n    style: {\n      height: 16,\n      marginTop: 16\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }), !loading && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.iconText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 15\n    }\n  }, Math.round(meteoData.next3hours.minhumi) + \"%\"), React.createElement(Text, {\n    style: styles.iconText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }, Math.round(meteoData.next3hours.maxhumi) + \"%\")))), React.createElement(View, {\n    style: styles.productList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, loading && React.createElement(Spinner, {\n    size: 16,\n    color: COLORS.CYAN,\n    style: {\n      height: 16,\n      marginTop: 16\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }), !loading && meteoData.products.map(function (p) {\n    return React.createElement(HygoMeteoPhyto, {\n      key: p.id,\n      product: p,\n      navigation: navigation,\n      day: moment().format('YYYY-MM-DD'),\n      hour: parseInt(moment().format('HH')),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    });\n  }), React.createElement(View, {\n    style: {\n      height: 80\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  date: {\n    fontFamily: 'nunito-bold',\n    fontSize: 32,\n    color: '#fff'\n  },\n  next_3hours: {\n    fontFamily: 'nunito-regular',\n    fontSize: 18,\n    color: '#fff',\n    textAlign: 'center'\n  },\n  textContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    paddingLeft: 35,\n    paddingRight: 35,\n    paddingTop: 15\n  },\n  iconContainer: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    justifyContent: 'space-between',\n    paddingLeft: 45,\n    paddingRight: 45,\n    paddingTop: 15,\n    flexDirection: 'row'\n  },\n  iconText: {\n    fontFamily: 'nunito-bold',\n    fontSize: 12,\n    color: '#fff',\n    textAlign: 'center'\n  },\n  meteoElement: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  productList: {\n    paddingRight: 15,\n    marginTop: 15\n  },\n  image: {\n    marginBottom: 10\n  }\n});\nexport default MeteoBriefScreen;","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/screens/MeteoBriefScreen.js"],"names":["React","useState","useEffect","useContext","Spinner","HygoMeteoPhyto","i18n","capitalize","COLORS","moment","getMeteo","MeteoBriefScreen","navigation","MONTHS","t","loading","setLoading","meteoData","setMeteoData","lastLoad","setLastLoad","counter","setCounter","start","end","hourRange","setHourRange","loadMeteo","meteo","getHour","Date","getTime","getDay","now","getDate","getMonth","isEnd","utc","minutes","hours","startOf","tz","format","interval","u1","addListener","setInterval","u2","clearInterval","remove","styles","textContainer","date","next_3hours","from","to","iconContainer","meteoElement","require","image","CYAN","height","marginTop","iconText","Math","round","next3hours","wind","gust","precipitation","probability","mintemp","maxtemp","minhumi","maxhumi","productList","products","map","p","id","parseInt","StyleSheet","create","fontFamily","fontSize","color","textAlign","display","alignItems","paddingLeft","paddingRight","paddingTop","justifyContent","flexDirection","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\nimport { View, StyleSheet, ScrollView, Text, Image } from 'react-native'\nimport { Spinner } from 'native-base'\nimport HygoMeteoPhyto from '../components/HygoMeteoPhyto'\nimport i18n from 'i18n-js'\nimport capitalize from '../utils/capitalize'\nimport COLORS from '../colors'\nimport moment from 'moment-timezone'\nimport { getMeteo } from '../api/hygoApi'\n\nconst MeteoBriefScreen = ({ navigation }) => {\n\n  const MONTHS = [\n    i18n.t('months.january'),\n    i18n.t('months.february'),\n    i18n.t('months.march'),\n    i18n.t('months.april'),\n    i18n.t('months.may'),\n    i18n.t('months.june'),\n    i18n.t('months.july'),\n    i18n.t('months.august'),\n    i18n.t('months.september'),\n    i18n.t('months.october'),\n    i18n.t('months.november'),\n    i18n.t('months.december'),\n  ]\n\n  const [loading, setLoading] = useState(true)\n  const [meteoData, setMeteoData] = useState({})\n  const [lastLoad, setLastLoad] = useState(-1)\n  const [counter, setCounter] = useState(0);\n  const [hourRange, setHourRange] = useState({\n    start: '',\n    end: ''\n  })\n  const loadMeteo = async () => {\n    let meteo = await getMeteo()\n    setMeteoData(meteo)\n\n    setHourRange({\n      start: getHour(),\n      end: getHour(true),\n    })\n\n    setLastLoad(new Date().getTime())\n    setLoading(false)\n  }\n\n  const getDay = () => {\n    let now = new Date()\n    return `${now.getDate()} ${capitalize(MONTHS[now.getMonth()])}`\n  }\n\n  const getHour = (isEnd) => {\n    let now = moment.utc()\n    if (now.minutes() >= 30) {\n        now.hours(now.hours() + 1)\n    }\n    if (isEnd) {\n      now.hours(now.hours() + 3)\n    }\n    now = now.startOf('hour')\n    now = now.tz('Europe/Paris').format('HH')\n\n    return now\n  }\n\n  useEffect(() => {\n    let interval\n\n    const u1 = navigation.addListener('didFocus', () => {\n      interval = setInterval(() => {\n        setCounter(new Date().getTime());\n      }, 30000);\n      setCounter(new Date().getTime());\n    });\n\n    const u2 = navigation.addListener('willBlur', () => {\n      clearInterval(interval);\n    });\n\n    interval = setInterval(() => {\n      setCounter(new Date().getTime());\n    }, 30000);\n    setCounter(new Date().getTime());\n\n    return () => {\n      u1.remove()\n      u2.remove()\n    };\n  }, []);\n\n  useEffect(() => {\n    if (counter - lastLoad >= 60000) {\n      loadMeteo()\n    }\n  }, [counter])\n\n  return (\n    <ScrollView>\n      <View style={styles.textContainer}>\n        <Text style={styles.date}>{getDay()}</Text>\n        <Text style={styles.next_3hours}>{i18n.t('meteo.next_3_hours', { from: hourRange.start, to: hourRange.end })}</Text>\n      </View>\n      <View style={styles.iconContainer}>\n        <View style={styles.meteoElement}>\n          <Image source={require('../../assets/ICN-Wind.png')} style={styles.image} />\n          { loading && (\n            <Spinner size={16} color={COLORS.CYAN} style={{ height: 16, marginTop: 16 }} />\n          )}\n          { !loading && (\n            <React.Fragment>\n              <Text style={styles.iconText}>{`${Math.round(meteoData.next3hours.wind)} km/h`}</Text>\n              <Text style={styles.iconText}>{`${Math.round(meteoData.next3hours.gust)} km/h`}</Text>\n            </React.Fragment>\n          )}\n        </View>\n        <View style={styles.meteoElement}>\n          <Image source={require('../../assets/ICN-Rain.png')} style={styles.image} />\n          { loading && (\n            <Spinner size={16} color={COLORS.CYAN} style={{ height: 16, marginTop: 16 }} />\n          )}\n          { !loading && (\n            <React.Fragment>\n              <Text style={styles.iconText}>{`${Math.round(meteoData.next3hours.precipitation)} mm`}</Text>\n              <Text style={styles.iconText}>{`${Math.round(meteoData.next3hours.probability)}%`}</Text>\n            </React.Fragment>\n          )}\n        </View>\n        <View style={styles.meteoElement}>\n          <Image source={require('../../assets/ICN-Temperature.png')} style={styles.image} />\n          { loading && (\n            <Spinner size={16} color={COLORS.CYAN} style={{ height: 16, marginTop: 16 }} />\n          )}\n          { !loading && (\n            <React.Fragment>\n              <Text style={styles.iconText}>{`${Math.round(meteoData.next3hours.mintemp)}°C`}</Text>\n              <Text style={styles.iconText}>{`${Math.round(meteoData.next3hours.maxtemp)}°C`}</Text>\n            </React.Fragment>\n          )}\n        </View>\n        <View style={styles.meteoElement}>\n          <Image source={require('../../assets/ICN-Hygro.png')} style={styles.image} />\n          { loading && (\n            <Spinner size={16} color={COLORS.CYAN} style={{ height: 16, marginTop: 16 }} />\n          )}\n          { !loading && (\n            <React.Fragment>\n              <Text style={styles.iconText}>{`${Math.round(meteoData.next3hours.minhumi)}%`}</Text>\n              <Text style={styles.iconText}>{`${Math.round(meteoData.next3hours.maxhumi)}%`}</Text>\n            </React.Fragment>\n          )}\n        </View>\n      </View>\n      <View style={styles.productList}>\n        { loading && (\n          <Spinner size={16} color={COLORS.CYAN} style={{ height: 16, marginTop: 16 }} />\n        )}\n\n        { !loading && meteoData.products.map(p => {\n            return (\n              <HygoMeteoPhyto key={p.id} product={p} navigation={navigation} day={moment().format('YYYY-MM-DD')} hour={parseInt(moment().format('HH'))} />\n            )\n        })}\n        <View style={{ height: 80 }}></View>\n      </View>\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  date: {\n    fontFamily: 'nunito-bold',\n    fontSize: 32,\n    color: '#fff'\n  },\n  next_3hours: {\n    fontFamily: 'nunito-regular',\n    fontSize: 18,\n    color: '#fff',\n    textAlign: 'center'\n  },\n  textContainer: {\n    display: 'flex', \n    alignItems: 'center',\n    paddingLeft: 35,\n    paddingRight: 35,\n    paddingTop: 15\n  },\n  iconContainer: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    justifyContent: 'space-between',\n    paddingLeft: 45,\n    paddingRight: 45,\n    paddingTop: 15,\n    flexDirection: 'row',\n  },\n  iconText: {\n    fontFamily: 'nunito-bold',\n    fontSize: 12,\n    color: '#fff',\n    textAlign: 'center',\n  },\n  meteoElement: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  productList: {\n    paddingRight: 15,\n    marginTop: 15,\n  },\n  image: {\n    marginBottom: 10,\n  }\n})\n\nexport default MeteoBriefScreen"]},"metadata":{},"sourceType":"module"}