{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/pulverisation-detailed/Map.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useCallback, useRef, createRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport MapView, { Polygon } from 'react-native-maps';\nimport COLORS from \"../../colors\";\nimport { PADDED, CONDITIONS_ORDERING } from \"../../constants\";\n\nvar Map = function Map(_ref) {\n  var region = _ref.region,\n      parcelles = _ref.parcelles,\n      hour = _ref.hour,\n      min = _ref.min,\n      max = _ref.max,\n      data = _ref.data;\n  var polygons = useRef([]);\n\n  if (polygons.current.length !== parcelles.length) {\n    polygons.current = Array(parcelles.length).fill().map(function (_, i) {\n      return polygons.current[i] || createRef();\n    });\n  }\n\n  var getFieldColor = useCallback(function (fieldId) {\n    var curCond = null;\n\n    for (var i = min; i <= max; i++) {\n      var padded = PADDED[i + parseInt(hour)];\n\n      if (!curCond || CONDITIONS_ORDERING[curCond] >= CONDITIONS_ORDERING[data[padded].parcelle[fieldId].condition]) {\n        if (data[padded].parcelle[fieldId]) {\n          curCond = data[padded].parcelle[fieldId].condition;\n        }\n      }\n    }\n\n    if (curCond === null) {\n      return COLORS.DEFAULT_FIELD;\n    }\n\n    return COLORS[curCond + \"_CARDS\"];\n  }, [min, max, data, hour]);\n  var getRegion = useCallback(function () {\n    var center = {\n      longitude: (region.lon_max - region.lon_min) / 2 + region.lon_min,\n      latitude: (region.lat_max - region.lat_min) / 2 + region.lat_min\n    };\n\n    var r = _objectSpread({}, center, {\n      longitudeDelta: Math.max(0.0222, Math.abs(region.lon_max - center.longitude)),\n      latitudeDelta: Math.max(0.0121, Math.abs(region.lat_max - center.latitude))\n    });\n\n    return r;\n  }, [region]);\n  return React.createElement(MapView, {\n    provider: \"google\",\n    mapType: \"hybrid\",\n    initialRegion: getRegion(),\n    style: styles.map,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, Object.values(parcelles).map(function (field, idx) {\n    return React.createElement(Polygon, {\n      key: field.id,\n      strokeWidth: 1,\n      strokeColor: COLORS.DARK_GREEN,\n      fillColor: getFieldColor(field.id),\n      ref: function ref(_ref2) {\n        return polygons.current[idx] = _ref2;\n      },\n      onLayout: function onLayout() {\n        return polygons.current[idx].setNativeProps({\n          fillColor: getFieldColor(field.id)\n        });\n      },\n      coordinates: field.features.coordinates[0].map(function (coordinate) {\n        return {\n          latitude: coordinate[1],\n          longitude: coordinate[0]\n        };\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    });\n  }));\n};\n\nvar styles = StyleSheet.create({\n  map: {\n    top: -20,\n    justifyContent: \"center\",\n    flexDirection: 'column',\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').width\n  }\n});\nexport default Map;","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/pulverisation-detailed/Map.js"],"names":["React","useCallback","useRef","createRef","MapView","Polygon","COLORS","PADDED","CONDITIONS_ORDERING","Map","region","parcelles","hour","min","max","data","polygons","current","length","Array","fill","map","_","i","getFieldColor","fieldId","curCond","padded","parseInt","parcelle","condition","DEFAULT_FIELD","getRegion","center","longitude","lon_max","lon_min","latitude","lat_max","lat_min","r","longitudeDelta","Math","abs","latitudeDelta","styles","Object","values","field","idx","id","DARK_GREEN","ref","setNativeProps","fillColor","features","coordinates","coordinate","StyleSheet","create","top","justifyContent","flexDirection","width","Dimensions","get","height"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef, createRef } from 'react'\n\nimport { StyleSheet, Dimensions } from 'react-native'\n\nimport  MapView, {Polygon} from 'react-native-maps';\n\nimport COLORS from '../../colors'\n\nimport { PADDED, CONDITIONS_ORDERING } from '../../constants'\n\nconst Map = ({ region, parcelles, hour, min, max, data }) => {\n  const polygons = useRef([]);\n  if (polygons.current.length !== parcelles.length) {\n    polygons.current = Array(parcelles.length).fill().map((_, i) => polygons.current[i] || createRef())\n  }\n\n  const getFieldColor = useCallback((fieldId) => {\n    let curCond = null\n    for (let i = min; i <= max; i++) {\n      let padded = PADDED[i+parseInt(hour)]\n      if (!curCond || CONDITIONS_ORDERING[curCond] >= CONDITIONS_ORDERING[data[padded].parcelle[fieldId].condition]) {\n        if (data[padded].parcelle[fieldId]) {\n          curCond = data[padded].parcelle[fieldId].condition\n        }\n      }\n    }\n\n    if (curCond === null) {\n      return COLORS.DEFAULT_FIELD\n    }\n\n    return COLORS[`${curCond}_CARDS`]\n  }, [min, max, data, hour])\n\n  const getRegion = useCallback(() => {\n    let center = {\n      longitude: (region.lon_max - region.lon_min) / 2 + region.lon_min,\n      latitude: (region.lat_max - region.lat_min) / 2 + region.lat_min,\n    }\n\n    let r = {\n      ...center,\n      longitudeDelta: Math.max(0.0222, Math.abs(region.lon_max - center.longitude)),\n      latitudeDelta: Math.max(0.0121, Math.abs(region.lat_max - center.latitude)),\n    }\n\n    return r\n  }, [region])\n\n  return (\n    <MapView\n      provider=\"google\"\n      mapType=\"hybrid\"\n      initialRegion={getRegion()}\n      style={styles.map}>\n\n      { Object.values(parcelles).map((field, idx) => {\n        return (\n          <Polygon\n            key={field.id}\n            strokeWidth={1}\n            strokeColor={COLORS.DARK_GREEN}\n            fillColor={getFieldColor(field.id)}\n            ref={ref => (polygons.current[idx] = ref)}\n            onLayout={() => polygons.current[idx].setNativeProps({\n                fillColor: getFieldColor(field.id)\n            })}\n            coordinates={field.features.coordinates[0].map((coordinate) => {\n              return {\n                latitude: coordinate[1],\n                longitude: coordinate[0],\n              }\n            })}\n          />  \n        );\n      })}\n    </MapView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  map: {\n    top: -20,\n    justifyContent :\"center\",\n    flexDirection: 'column',\n    width: Dimensions.get('window').width,\n    height : Dimensions.get('window').width,\n  },\n})\n\nexport default Map"]},"metadata":{},"sourceType":"module"}