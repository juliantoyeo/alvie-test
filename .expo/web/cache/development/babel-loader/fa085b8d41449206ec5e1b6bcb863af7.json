{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/pulverisation-detailed/Modulation.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { Spinner, Icon } from 'native-base';\nimport COLORS from \"../../colors\";\nimport { getModulationValue } from \"../../api/hygoApi\";\nimport i18n from 'i18n-js';\nimport { connect } from 'react-redux';\nvar phytoIdHide = [12];\n\nvar Modulation = function Modulation(_ref) {\n  var day = _ref.day,\n      hour = _ref.hour,\n      selected = _ref.selected,\n      setModulationChanged = _ref.setModulationChanged,\n      modulationChanged = _ref.modulationChanged,\n      phytoProductSelected = _ref.phytoProductSelected,\n      culturesSelected = _ref.culturesSelected,\n      phytoProductList = _ref.phytoProductList;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      modulationValue = _useState2[0],\n      setModulationValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modulationLoading = _useState4[0],\n      setModulationLoading = _useState4[1];\n\n  var _useState5 = useState(_objectSpread({}, selected)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cSelected = _useState6[0],\n      setCSelected = _useState6[1];\n\n  var updateModulation = function updateModulation() {\n    var params, res;\n    return _regeneratorRuntime.async(function updateModulation$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setModulationLoading(true);\n            params = {\n              products: phytoProductSelected,\n              cultures: culturesSelected,\n              selected: cSelected\n            };\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(getModulationValue(_objectSpread({}, params, {\n              day: day,\n              hour: hour\n            })));\n\n          case 4:\n            res = _context.sent;\n            setModulationValue(res);\n            setModulationChanged(false);\n            setModulationLoading(false);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    updateModulation();\n  }, []);\n  useEffect(function () {\n    if (selected.min !== cSelected.min || selected.max !== cSelected.max) {\n      setModulationChanged(true);\n    }\n\n    setCSelected(selected);\n  }, [selected]);\n\n  var getPhytoName = function getPhytoName(pid) {\n    return i18n.t(\"products.\" + phytoProductList.filter(function (p) {\n      return p.id === pid;\n    })[0].name);\n  };\n\n  return React.createElement(View, {\n    style: styles.modulation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.headerView,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.headerText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, i18n.t('modulation.dose_computation'))), phytoProductSelected.map(function (p) {\n    return !phytoIdHide.find(function (id) {\n      return id == p;\n    }) && React.createElement(View, {\n      style: styles.modulationContainer,\n      key: p,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, React.createElement(View, {\n      style: styles.modulationTextContaier,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: styles.modulationBlock,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }, modulationChanged && modulationLoading && React.createElement(Spinner, {\n      style: styles.modulationSpinner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 19\n      }\n    }), (modulationChanged || !modulationValue) && !modulationLoading && React.createElement(TouchableWithoutFeedback, {\n      onPress: updateModulation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 19\n      }\n    }, React.createElement(Icon, {\n      type: \"MaterialCommunityIcons\",\n      name: \"refresh\",\n      style: styles.modulationRefresh,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 72\n      }\n    })), !modulationChanged && React.createElement(Text, {\n      style: styles.modulationTextValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 19\n      }\n    }, modulationValue[p] + \"%\")), React.createElement(Text, {\n      style: styles.modulationTextInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, getPhytoName(p))));\n  }));\n};\n\nvar styles = StyleSheet.create({\n  modulation: {\n    backgroundColor: COLORS.BEIGE,\n    paddingRight: 15,\n    paddingBottom: 10\n  },\n  headerView: {\n    paddingVertical: 8,\n    paddingHorizontal: 20\n  },\n  headerText: {\n    fontFamily: 'nunito-bold',\n    fontSize: 16,\n    color: COLORS.DARK_BLUE\n  },\n  modulationContainer: {\n    backgroundColor: '#fff',\n    borderTopRightRadius: 20,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 15,\n    paddingBottom: 12,\n    paddingHorizontal: 20,\n    marginBottom: 5\n  },\n  modulationTextContaier: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  modulationTextInfo: {\n    color: COLORS.DARK_BLUE,\n    fontFamily: 'nunito-bold',\n    fontSize: 16,\n    flex: 1\n  },\n  modulationBlock: {\n    height: 60,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 120\n  },\n  modulationTextValue: {\n    marginLeft: 0,\n    color: COLORS.DARK_BLUE,\n    fontFamily: 'nunito-bold',\n    fontSize: 48\n  },\n  modulationRefresh: {\n    marginLeft: 27,\n    color: '#8bdf8b',\n    fontSize: 48\n  },\n  modulationTextStar: {\n    fontSize: 12,\n    fontFamily: 'nunito-heavy',\n    color: '#aaaaaa',\n    marginBottom: 30\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    phytoProductList: state.pulve.phytoProductList,\n    culturesSelected: state.pulve.culturesSelected,\n    phytoProductSelected: state.pulve.phytoProductSelected\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, props) {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Modulation);","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/pulverisation-detailed/Modulation.js"],"names":["React","useState","useEffect","useCallback","Spinner","Icon","COLORS","getModulationValue","i18n","connect","phytoIdHide","Modulation","day","hour","selected","setModulationChanged","modulationChanged","phytoProductSelected","culturesSelected","phytoProductList","modulationValue","setModulationValue","modulationLoading","setModulationLoading","cSelected","setCSelected","updateModulation","params","products","cultures","res","min","max","getPhytoName","pid","t","filter","p","id","name","styles","modulation","headerView","headerText","map","find","modulationContainer","modulationTextContaier","modulationBlock","modulationSpinner","modulationRefresh","modulationTextValue","modulationTextInfo","StyleSheet","create","backgroundColor","BEIGE","paddingRight","paddingBottom","paddingVertical","paddingHorizontal","fontFamily","fontSize","color","DARK_BLUE","borderTopRightRadius","display","flexDirection","alignItems","justifyContent","marginBottom","flex","height","width","marginLeft","modulationTextStar","mapStateToProps","state","pulve","mapDispatchToProps","dispatch","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\n\nimport { StyleSheet, View, Text, TouchableWithoutFeedback } from 'react-native'\nimport { Spinner, Icon } from 'native-base'\n\nimport COLORS from '../../colors'\n\nimport { getModulationValue } from '../../api/hygoApi'\n\nimport i18n from 'i18n-js'\n\nimport { connect } from 'react-redux'\n\nconst phytoIdHide = [12]     // Hide \"solution azotée\"\n\nconst Modulation = ({ day, hour, selected, setModulationChanged, modulationChanged, phytoProductSelected, culturesSelected, phytoProductList }) => {\n  /**\n   * cSelected    : number of slot selected. {min: <number>, max: <number>}\n   */\n  const [modulationValue, setModulationValue] = useState()\n  const [modulationLoading, setModulationLoading] = useState(false)\n  const [cSelected, setCSelected] = useState({...selected})\n\n  const updateModulation = async () => {\n    setModulationLoading(true)\n\n    let params = {\n      products: phytoProductSelected,\n      cultures: culturesSelected,\n      selected: cSelected,\n    }\n\n    let res = await getModulationValue({\n      ...params,\n      day,\n      hour,\n    })\n\n    setModulationValue(res)\n\n    setModulationChanged(false)\n    setModulationLoading(false)\n  }\n\n  useEffect(() => {\n    updateModulation()\n  }, [])\n\n  useEffect(() => {\n    if (selected.min !== cSelected.min || selected.max !== cSelected.max) {\n      setModulationChanged(true)\n    }\n    setCSelected(selected)\n  }, [selected])\n\n  const getPhytoName = (pid) => {\n    return i18n.t(`products.${phytoProductList.filter(p => p.id === pid)[0].name}`)\n  }\n\n  return ( \n    // Hide the whole component if all the products have to be hidden\n    // phytoProductSelected.reduce((acc, p) => phytoIdHide.find((id) => id == p)  ? acc+1 : acc , 0) < phytoProductSelected.length && (\n    <View style={styles.modulation}>\n      <View style={styles.headerView}>\n        <Text style={styles.headerText}>{i18n.t('modulation.dose_computation')}</Text>\n      </View>\n      { phytoProductSelected.map(p => {\n        return (\n          // Hide the product if necessary\n          !phytoIdHide.find((id) => id == p) && (\n          <View style={styles.modulationContainer} key={p}>\n            <View style={styles.modulationTextContaier}>\n              <View style={styles.modulationBlock}>\n                { modulationChanged && modulationLoading && (\n                  <Spinner style={styles.modulationSpinner} />\n                )}\n                { (modulationChanged || !modulationValue) && !modulationLoading && (\n                  <TouchableWithoutFeedback onPress={updateModulation}><Icon type=\"MaterialCommunityIcons\" name=\"refresh\" style={styles.modulationRefresh} /></TouchableWithoutFeedback>\n                )}\n                { !modulationChanged && (\n                  <Text style={styles.modulationTextValue}>{`${modulationValue[p]}%`}</Text>\n                )}\n              </View>\n              <Text style={styles.modulationTextInfo}>{getPhytoName(p)}</Text>\n            </View>\n          </View>\n        ))\n      })}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  modulation: {\n    backgroundColor: COLORS.BEIGE,\n    paddingRight: 15,\n    paddingBottom: 10,\n  },\n  headerView: {\n    paddingVertical: 8,\n    paddingHorizontal: 20,\n  },\n  headerText: {\n    fontFamily: 'nunito-bold',\n    fontSize: 16,\n    color: COLORS.DARK_BLUE,\n  },\n  modulationContainer: {\n    backgroundColor: '#fff',\n    borderTopRightRadius: 20,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 15,\n    paddingBottom: 12,\n    paddingHorizontal: 20,\n    marginBottom: 5,\n  },\n  modulationTextContaier: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  modulationTextInfo: {\n    color: COLORS.DARK_BLUE,\n    fontFamily: 'nunito-bold',\n    fontSize: 16,\n    flex: 1,\n  },\n  modulationBlock: {\n    height: 60,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 120,\n  },\n  modulationTextValue: {\n    marginLeft: 0,\n    color: COLORS.DARK_BLUE,\n    fontFamily: 'nunito-bold',\n    fontSize: 48,\n  },\n  modulationRefresh: {\n    marginLeft: 27,\n    color: '#8bdf8b',\n    fontSize: 48,\n  },\n  modulationTextStar: {\n    fontSize: 12,\n    fontFamily: 'nunito-heavy',\n    color: '#aaaaaa',\n    marginBottom: 30,\n  },\n})\n\nconst mapStateToProps = (state) => ({\n  phytoProductList: state.pulve.phytoProductList,\n  culturesSelected: state.pulve.culturesSelected,\n  phytoProductSelected: state.pulve.phytoProductSelected,\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Modulation);"]},"metadata":{},"sourceType":"module"}