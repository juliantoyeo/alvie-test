{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/App.js\";\nimport React, { useState, useContext } from 'react';\nimport { Provider } from 'react-redux';\nimport configureStore from \"./src/store/configureStore\";\nimport AppContainer from \"./src/navigation\";\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport { AppLoading } from 'expo';\nimport * as Localization from 'expo-localization';\nimport i18n from 'i18n-js';\nimport translations from \"./src/i18n/i18n.js\";\nimport { SnackbarProvider } from \"./src/context/snackbar.context\";\nimport { ModulationProvider } from \"./src/context/modulation.context\";\ni18n.translations = translations;\ni18n.locale = Localization.locale;\ni18n.defaultLocale = 'fr';\ni18n.fallbacks = true;\n\nvar fetchResources = function fetchResources() {\n  return _regeneratorRuntime.async(function fetchResources$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Promise.all([Font.loadAsync({\n            'nunito-bold': require(\"./assets/fonts/Nunito-Bold.ttf\"),\n            'nunito-italic': require(\"./assets/fonts/Nunito-BoldItalic.ttf\"),\n            'nunito-regular': require(\"./assets/fonts/Nunito-SemiBold.ttf\"),\n            'nunito-heavy': require(\"./assets/fonts/Nunito-ExtraBold.ttf\"),\n            'Roboto_medium': require(\"./assets/fonts/Nunito-SemiBold.ttf\")\n          }), Asset.loadAsync([require(\"./assets/blue_back.png\"), require(\"./assets/meteo_back.png\"), require(\"./assets/ICN-Nav1.png\"), require(\"./assets/ICN-Nav2.png\"), require(\"./assets/ICN-Nav3.png\"), require(\"./assets/ICN-Nav4.png\"), require(\"./assets/ICN-Temperature.png\"), require(\"./assets/ICN-Rain.png\"), require(\"./assets/ICN-Hygro.png\"), require(\"./assets/ICN-Wind.png\")])]));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar store = configureStore();\nexport default App = function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      resourcesLoaded = _useState2[0],\n      setResourcesLoaded = _useState2[1];\n\n  if (!resourcesLoaded) {\n    return React.createElement(AppLoading, {\n      startAsync: fetchResources,\n      onFinish: function onFinish() {\n        return setResourcesLoaded(true);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, React.createElement(SnackbarProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, React.createElement(ModulationProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, React.createElement(AppContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/App.js"],"names":["React","useState","useContext","Provider","configureStore","AppContainer","Asset","Font","AppLoading","Localization","i18n","translations","SnackbarProvider","ModulationProvider","locale","defaultLocale","fallbacks","fetchResources","Promise","all","loadAsync","require","store","App","resourcesLoaded","setResourcesLoaded"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,cAAP;AAEA,OAAOC,YAAP;AAEA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,UAAT,QAA2B,MAA3B;AAEA,OAAO,KAAKC,YAAZ,MAA8B,mBAA9B;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,YAAP;AAEA,SAASC,gBAAT;AACA,SAASC,kBAAT;AAEAH,IAAI,CAACC,YAAL,GAAoBA,YAApB;AACAD,IAAI,CAACI,MAAL,GAAcL,YAAY,CAACK,MAA3B;AACAJ,IAAI,CAACK,aAAL,GAAqB,IAArB;AACAL,IAAI,CAACM,SAAL,GAAiB,IAAjB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACfC,OAAO,CAACC,GAAR,CAAY,CAChBZ,IAAI,CAACa,SAAL,CAAe;AACb,2BAAeC,OAAO,kCADT;AAEb,6BAAiBA,OAAO,wCAFX;AAGb,8BAAkBA,OAAO,sCAHZ;AAIb,4BAAgBA,OAAO,uCAJV;AAMb,6BAAiBA,OAAO;AANX,WAAf,CADgB,EAShBf,KAAK,CAACc,SAAN,CAAgB,CACdC,OAAO,0BADO,EAEdA,OAAO,2BAFO,EAGdA,OAAO,yBAHO,EAIdA,OAAO,yBAJO,EAKdA,OAAO,yBALO,EAMdA,OAAO,yBANO,EAOdA,OAAO,gCAPO,EAQdA,OAAO,yBARO,EASdA,OAAO,0BATO,EAUdA,OAAO,yBAVO,CAAhB,CATgB,CAAZ,CADe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAyBA,IAAMC,KAAK,GAAGlB,cAAc,EAA5B;AAEA,eAAemB,GAAG,GAAG,eAAM;AAAA,kBACqBtB,QAAQ,CAAC,KAAD,CAD7B;AAAA;AAAA,MAClBuB,eADkB;AAAA,MACDC,kBADC;;AAEzB,MAAI,CAACD,eAAL,EAAsB;AACpB,WACE,oBAAC,UAAD;AAAY,MAAA,UAAU,EAAEP,cAAxB;AAAwC,MAAA,QAAQ,EAAE;AAAA,eAAMQ,kBAAkB,CAAC,IAAD,CAAxB;AAAA,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAED,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEH,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF;AASD,CAjBD","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { Provider } from 'react-redux';\nimport configureStore from './src/store/configureStore';\n\nimport AppContainer from './src/navigation'\n\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\nimport { AppLoading } from 'expo';\n\nimport * as Localization from 'expo-localization';\nimport i18n from 'i18n-js';\nimport translations from './src/i18n/i18n.js'\n\nimport { SnackbarProvider } from './src/context/snackbar.context'\nimport { ModulationProvider } from './src/context/modulation.context'\n\ni18n.translations = translations\ni18n.locale = Localization.locale\ni18n.defaultLocale = 'fr'\ni18n.fallbacks = true\n\nconst fetchResources = async () => {\n  await Promise.all([\n    Font.loadAsync({\n      'nunito-bold': require('./assets/fonts/Nunito-Bold.ttf'),\n      'nunito-italic': require('./assets/fonts/Nunito-BoldItalic.ttf'),\n      'nunito-regular': require('./assets/fonts/Nunito-SemiBold.ttf'),\n      'nunito-heavy': require('./assets/fonts/Nunito-ExtraBold.ttf'), \n      \n      'Roboto_medium': require('./assets/fonts/Nunito-SemiBold.ttf'),\n    }),\n    Asset.loadAsync([\n      require('./assets/blue_back.png'),      \n      require('./assets/meteo_back.png'),      \n      require('./assets/ICN-Nav1.png'),      \n      require('./assets/ICN-Nav2.png'),      \n      require('./assets/ICN-Nav3.png'),      \n      require('./assets/ICN-Nav4.png'),      \n      require('./assets/ICN-Temperature.png'),      \n      require('./assets/ICN-Rain.png'),      \n      require('./assets/ICN-Hygro.png'),      \n      require('./assets/ICN-Wind.png'),      \n    ]),\n  ]);\n};\n\nconst store = configureStore();\n\nexport default App = () => {\n  const [resourcesLoaded, setResourcesLoaded] = useState(false)\n  if (!resourcesLoaded) {\n    return (\n      <AppLoading startAsync={fetchResources} onFinish={() => setResourcesLoaded(true)} />\n    )\n  }\n\n  return (\n    <Provider store={store}>\n      <SnackbarProvider>\n        <ModulationProvider>\n          <AppContainer />\n        </ModulationProvider>\n      </SnackbarProvider>\n    </Provider>  \n  );\n}"]},"metadata":{},"sourceType":"module"}