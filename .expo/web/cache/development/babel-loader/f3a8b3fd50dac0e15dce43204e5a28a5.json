{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/screens/MeteoRadar.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useRef, createRef } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport MapView, { Overlay, Polygon } from 'react-native-maps';\nimport { getMeteoRadar, getLastGeometryFields } from \"../api/hygoApi\";\nimport { connect } from 'react-redux';\nimport { Spinner, Icon, Button } from 'native-base';\nimport HygoRadarSlider from \"../components/HygoRadarSlider\";\nimport COLORS from \"../colors\";\nvar factor = 7388 / 7553;\n\nvar MeteoRadar = function MeteoRadar(_ref) {\n  var navigation = _ref.navigation,\n      active = _ref.active,\n      parcelles = _ref.parcelles;\n  var interval = null;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loadingPercent = _useState4[0],\n      setLoadingPercent = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      images = _useState6[0],\n      setImages = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      paused = _useState8[0],\n      setPaused = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      region = _useState10[0],\n      setRegion = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      currentWeather = _useState12[0],\n      setCurrentWeather = _useState12[1];\n\n  var mapRef = useRef();\n  var coords = {\n    lon_min: -9.518991999949419,\n    lon_max: 13.721623908424407,\n    lat_min: 39.79171589293103,\n    lat_max: 53.86656657651131\n  };\n  useEffect(function () {\n    loadMeteoRadar();\n  }, []);\n  useEffect(function () {\n    var unsubscribe = navigation.addListener('willBlur', function () {\n      clearInterval(interval);\n    });\n    return function () {\n      unsubscribe.remove();\n    };\n  }, [navigation]);\n  useEffect(function () {\n    if (active && !paused && images.length > 0) {\n      interval = setInterval(function () {\n        setCurrentWeather(function (prev) {\n          return (prev + 1) % images.length;\n        });\n      }, 300);\n    } else if (paused || !active) {\n      clearInterval(interval);\n    }\n\n    return function () {\n      return clearInterval(interval);\n    };\n  }, [paused, images, active]);\n\n  var loadMeteoRadar = function loadMeteoRadar() {\n    var res, i;\n    return _regeneratorRuntime.async(function loadMeteoRadar$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(getMeteoRadar());\n\n          case 2:\n            res = _context.sent;\n            i = 0;\n\n          case 4:\n            if (!(i < res.length)) {\n              _context.next = 15;\n              break;\n            }\n\n            if (!(i < 10)) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(Image.prefetch(res[i].url));\n\n          case 8:\n            setLoadingPercent((i + 1) * 10);\n            _context.next = 12;\n            break;\n\n          case 11:\n            Image.prefetch(res[i].url);\n\n          case 12:\n            i++;\n            _context.next = 4;\n            break;\n\n          case 15:\n            setImages(res);\n            setLoading(false);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var setFranceRegion = function setFranceRegion(init) {\n    var center = {\n      latitude: (coords.lat_max - coords.lat_min) / 2 + coords.lat_min,\n      longitude: (coords.lon_max - coords.lon_min) / 2 + coords.lon_min\n    };\n\n    var r = _objectSpread({}, center, {\n      latitudeDelta: Math.abs(center.latitude - coords.lat_min),\n      longitudeDelta: Math.abs(center.longitude - coords.lon_min)\n    });\n\n    if (init) {\n      setRegion(r);\n    } else {\n      updateRegion(r);\n    }\n  };\n\n  var setAgriRegion = function setAgriRegion(init) {\n    var center = {\n      longitude: (parcelles.region.lon_max - parcelles.region.lon_min) / 2 + parcelles.region.lon_min,\n      latitude: (parcelles.region.lat_max - parcelles.region.lat_min) / 2 + parcelles.region.lat_min\n    };\n\n    var r = _objectSpread({}, center, {\n      longitudeDelta: Math.max(0.1502, Math.abs(parcelles.region.lon_max - center.longitude)),\n      latitudeDelta: Math.max(0.1501, Math.abs(parcelles.region.lat_max - center.latitude))\n    });\n\n    if (init) {\n      setRegion(r);\n    } else {\n      updateRegion(r);\n    }\n  };\n\n  var updateRegion = function updateRegion(region) {\n    setTimeout(function () {\n      return mapRef.current.animateToRegion(region);\n    }, 10);\n  };\n\n  useEffect(function () {\n    setAgriRegion(true);\n  }, []);\n  var polygons = useRef([]);\n\n  if (polygons.current.length !== parcelles.fields.length) {\n    polygons.current = Array(parcelles.fields.length).fill().map(function (_, i) {\n      return polygons.current[i] || createRef();\n    });\n  }\n\n  return React.createElement(View, {\n    style: {\n      display: 'flex',\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, loading && React.createElement(View, {\n    style: styles.mapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, React.createElement(Spinner, {\n    size: 16,\n    color: COLORS.CYAN,\n    style: {\n      height: 48,\n      marginTop: 48\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }), React.createElement(Text, {\n    style: styles.loadingPercent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, loadingPercent + \"%\")), region && !loading && React.createElement(View, {\n    style: styles.mapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    icon: true,\n    transparent: true,\n    style: styles.posButton,\n    onPress: function onPress() {\n      return setAgriRegion();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, React.createElement(Icon, {\n    name: \"my-location\",\n    type: \"MaterialIcons\",\n    style: styles.posIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  })), React.createElement(Button, {\n    icon: true,\n    transparent: true,\n    style: [styles.posButton, {\n      top: 50\n    }],\n    onPress: function onPress() {\n      return setFranceRegion();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, React.createElement(Icon, {\n    name: \"globe\",\n    type: \"FontAwesome\",\n    style: styles.posIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  })), React.createElement(MapView, {\n    provider: \"google\",\n    mapType: \"hybrid\",\n    initialRegion: region,\n    ref: mapRef,\n    style: styles.map,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, parcelles.fields.map(function (field, idx) {\n    return React.createElement(Polygon, {\n      key: field.id,\n      strokeWidth: 1,\n      strokeColor: '#fff',\n      fillColor: COLORS.CYAN,\n      ref: function ref(_ref2) {\n        return polygons.current[idx] = _ref2;\n      },\n      onLayout: function onLayout() {\n        return polygons.current[idx].setNativeProps({\n          fillColor: COLORS.CYAN\n        });\n      },\n      tappable: false,\n      coordinates: field.features.coordinates[0].map(function (coordinate) {\n        return {\n          latitude: coordinate[1],\n          longitude: coordinate[0]\n        };\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    });\n  }), React.createElement(Overlay, {\n    image: images[currentWeather].url,\n    bounds: [[coords.lat_max * factor, coords.lon_min], [coords.lat_min, coords.lon_max]],\n    opacity: 0.1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  })), React.createElement(View, {\n    style: {\n      left: 20,\n      position: 'absolute',\n      bottom: 120\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, React.createElement(HygoRadarSlider, {\n    width: Dimensions.get('window').width - 40,\n    progress: parseFloat(currentWeather) / (images.length - 1),\n    updateProgress: function updateProgress(i) {\n      setCurrentWeather(i * (images.length - 1));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: styles.radarContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.radarText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }, images[currentWeather].d), React.createElement(View, {\n    style: styles.controls,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: styles.button,\n    rounded: true,\n    icon: true,\n    onPress: function onPress() {\n      return setPaused(function (prev) {\n        return !prev;\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 15\n    }\n  }, React.createElement(Icon, {\n    style: styles.icon,\n    type: \"Foundation\",\n    name: paused ? \"play\" : \"pause\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  }))))));\n};\n\nvar styles = StyleSheet.create({\n  mapContainer: {\n    flex: 1,\n    display: 'flex',\n    paddingTop: 20,\n    position: 'relative'\n  },\n  map: {\n    width: Dimensions.get('window').width,\n    flex: 1\n  },\n  radarContainer: {\n    padding: 15,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    bottom: 80,\n    left: Dimensions.get('window').width / 2 - 60\n  },\n  radarText: {\n    color: '#fff',\n    fontFamily: 'nunito-heavy',\n    fontSize: 16\n  },\n  loadingPercent: {\n    color: COLORS.CYAN,\n    fontFamily: 'nunito-heavy',\n    fontSize: 14\n  },\n  controls: {\n    display: 'none',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 10\n  },\n  button: {\n    backgroundColor: COLORS.CYAN,\n    width: 32,\n    height: 32,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 16,\n    marginHorizontal: 5\n  },\n  iconRewind: {\n    color: '#fff',\n    fontSize: 24,\n    left: -1\n  },\n  icon: {\n    color: '#fff',\n    fontSize: 24,\n    left: 1\n  },\n  posButton: {\n    position: \"absolute\",\n    right: 5,\n    top: 20,\n    zIndex: 99999\n  },\n  posIcon: {\n    color: '#fff'\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    parcelles: state.metadata.parcelles\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, props) {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MeteoRadar);","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/screens/MeteoRadar.js"],"names":["React","useState","useEffect","useRef","createRef","MapView","Overlay","Polygon","getMeteoRadar","getLastGeometryFields","connect","Spinner","Icon","Button","HygoRadarSlider","COLORS","factor","MeteoRadar","navigation","active","parcelles","interval","loading","setLoading","loadingPercent","setLoadingPercent","images","setImages","paused","setPaused","region","setRegion","currentWeather","setCurrentWeather","mapRef","coords","lon_min","lon_max","lat_min","lat_max","loadMeteoRadar","unsubscribe","addListener","clearInterval","remove","length","setInterval","prev","res","i","Image","prefetch","url","setFranceRegion","init","center","latitude","longitude","r","latitudeDelta","Math","abs","longitudeDelta","updateRegion","setAgriRegion","max","setTimeout","current","animateToRegion","polygons","fields","Array","fill","map","_","display","flex","alignItems","justifyContent","styles","mapContainer","CYAN","height","marginTop","posButton","posIcon","top","field","idx","id","ref","setNativeProps","fillColor","features","coordinates","coordinate","left","position","bottom","Dimensions","get","width","parseFloat","radarContainer","radarText","d","controls","button","icon","StyleSheet","create","paddingTop","padding","color","fontFamily","fontSize","flexDirection","backgroundColor","borderRadius","marginHorizontal","iconRewind","right","zIndex","mapStateToProps","state","metadata","mapDispatchToProps","dispatch","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, createRef } from 'react'\nimport { Dimensions, StyleSheet, View, Image, Text, TouchableOpacity } from 'react-native'\nimport  MapView, { Overlay, Polygon } from 'react-native-maps';\nimport { getMeteoRadar, getLastGeometryFields } from '../api/hygoApi';\n\nimport { connect } from 'react-redux'\nimport { Spinner, Icon, Button } from 'native-base'\n\nimport HygoRadarSlider from '../components/HygoRadarSlider'\n\nimport COLORS from '../colors'\n\nconst factor = 7388/7553\n\nconst MeteoRadar = ({ navigation, active, parcelles }) => {\n  let interval = null\n\n  const [loading, setLoading] = useState(true)\n  const [loadingPercent, setLoadingPercent] = useState(0)\n  const [images, setImages] = useState([])\n  const [paused, setPaused] = useState(false)\n\n  const [region, setRegion] = useState(null)\n  const [currentWeather, setCurrentWeather] = useState(0)\n\n  const mapRef = useRef()\n\n  const coords = {\n    lon_min: -9.518991999949419,\n    lon_max: 13.721623908424407,\n\n    lat_min: 39.79171589293103,\n    lat_max: 53.86656657651131,\n  }\n\n  useEffect(() => {\n    loadMeteoRadar()\n  }, [])\n\n  useEffect(() => {\n    const unsubscribe = navigation.addListener('willBlur', () => {\n      clearInterval(interval)\n    });\n\n    return () => {\n      unsubscribe.remove()\n    };\n  }, [navigation])\n\n  useEffect(() => {\n    if (active && !paused && images.length > 0) {\n      interval = setInterval(() => {\n        setCurrentWeather(prev => {\n          return (prev + 1) % images.length;\n        })\n      }, 300);\n    } else if (paused || !active) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [paused, images, active]);\n\n  const loadMeteoRadar = async () => {\n    const res = await getMeteoRadar()\n\n    for (let i = 0; i < res.length; i++) {\n      if (i < 10) {\n        await Image.prefetch(res[i].url)\n        setLoadingPercent((i+1)*10)\n      } else {\n        Image.prefetch(res[i].url)\n      }\n    }\n\n    setImages(res)\n    setLoading(false)\n  }\n\n  const setFranceRegion = (init) => {\n    let center = {\n      latitude: (coords.lat_max - coords.lat_min) / 2 + coords.lat_min,\n      longitude: (coords.lon_max - coords.lon_min) / 2 + coords.lon_min,\n    }\n\n    let r = {\n      ...center,\n      latitudeDelta: Math.abs(center.latitude - coords.lat_min),\n      longitudeDelta: Math.abs(center.longitude - coords.lon_min),\n    }\n\n    if (init) {\n      setRegion(r)\n    } else {\n      updateRegion(r)\n    }\n  }\n\n  const setAgriRegion = (init) => {\n    let center = {\n      longitude: (parcelles.region.lon_max - parcelles.region.lon_min) / 2 + parcelles.region.lon_min,\n      latitude: (parcelles.region.lat_max - parcelles.region.lat_min) / 2 + parcelles.region.lat_min,\n    }\n\n    let r = {\n      ...center,\n      longitudeDelta: Math.max(0.1502, Math.abs(parcelles.region.lon_max - center.longitude)),\n      latitudeDelta: Math.max(0.1501, Math.abs(parcelles.region.lat_max - center.latitude)),\n    }\n\n    if (init) {\n      setRegion(r)\n    } else {\n      updateRegion(r)\n    }\n  }\n\n  const updateRegion = (region) => {\n    setTimeout(() => mapRef.current.animateToRegion(region), 10);\n  }\n\n  useEffect(() => {\n    setAgriRegion(true)\n  }, [])\n\n  const polygons = useRef([]);\n  if (polygons.current.length !== parcelles.fields.length) {\n    polygons.current = Array(parcelles.fields.length).fill().map((_, i) => polygons.current[i] || createRef())\n  }\n\n  return (\n    <View style={{ display: 'flex', flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      { loading && (\n        <View style={styles.mapContainer}>\n          <Spinner size={16} color={COLORS.CYAN} style={{ height: 48, marginTop: 48 }} />\n          <Text style={styles.loadingPercent}>{`${loadingPercent}%`}</Text>\n        </View>\n      )}\n      { region && !loading && (\n        <View style={styles.mapContainer}>\n          <Button icon transparent style={styles.posButton} onPress={() => setAgriRegion()}>\n            <Icon name=\"my-location\" type=\"MaterialIcons\" style={styles.posIcon} />\n          </Button>\n          <Button icon transparent style={[styles.posButton, { top: 50 }]} onPress={() => setFranceRegion()}>\n            <Icon name=\"globe\" type=\"FontAwesome\" style={styles.posIcon} />\n          </Button>\n          <MapView\n            provider=\"google\"\n            mapType=\"hybrid\"\n            initialRegion={region}\n            ref={mapRef}\n            style={styles.map}>\n\n            { parcelles.fields.map((field, idx) => {\n              return (\n                <Polygon\n                  key={field.id}\n                  strokeWidth={1}\n                  strokeColor={'#fff'}\n                  fillColor={COLORS.CYAN}\n                  ref={ref => (polygons.current[idx] = ref)}\n                  onLayout={() => polygons.current[idx].setNativeProps({\n                      fillColor: COLORS.CYAN\n                  })}\n                  tappable={false}\n                  coordinates={field.features.coordinates[0].map((coordinate) => {\n                    return {\n                      latitude: coordinate[1],\n                      longitude: coordinate[0],\n                    }\n                  })}\n                />  \n              );\n            })}\n\n            <Overlay image={images[currentWeather].url} \n              bounds={[[coords.lat_max * factor, coords.lon_min], [coords.lat_min, coords.lon_max]]} opacity={0.1} />\n\n          </MapView>\n\n          <View style={{ left: 20, position: 'absolute', bottom: 120 }}>\n          <HygoRadarSlider width={Dimensions.get('window').width - 40} progress={parseFloat(currentWeather)/(images.length-1)} updateProgress={(i) => {\n            setCurrentWeather(i*(images.length-1))\n          }} />\n          </View>\n\n          <View style={styles.radarContainer}>\n            <Text style={styles.radarText}>{images[currentWeather].d}</Text>\n            <View style={styles.controls}>\n              <TouchableOpacity style={styles.button} rounded icon onPress={() => setPaused(prev => !prev)}>\n                <Icon style={styles.icon} type=\"Foundation\" name={paused ? \"play\" : \"pause\"} />\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  mapContainer: { \n    flex: 1, \n    display: 'flex', \n    paddingTop: 20,\n    position: 'relative'\n  },\n  map: {\n    width: Dimensions.get('window').width,\n    flex: 1,\n  },\n  radarContainer: {\n    padding: 15,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    bottom: 80,\n    left: Dimensions.get('window').width / 2 - 60\n  },\n  radarText: {\n    color: '#fff',\n    fontFamily: 'nunito-heavy',\n    fontSize: 16,\n  },\n  loadingPercent: {\n    color: COLORS.CYAN,\n    fontFamily: 'nunito-heavy',\n    fontSize: 14,\n  },\n  controls: {\n    display: 'none',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 10,\n  },\n  button: {\n    backgroundColor: COLORS.CYAN,\n    width: 32,\n    height: 32,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 16,\n    marginHorizontal: 5\n  },\n  iconRewind: {\n    color: '#fff',\n    fontSize: 24,\n    left: -1\n  },\n  icon: {\n    color: '#fff',\n    fontSize: 24,\n    left: 1\n  },\n  posButton: {\n    position: \"absolute\",\n    right: 5,\n    top: 20,\n    zIndex: 99999,\n  },\n  posIcon: {\n    color: '#fff'\n  }\n})\n\n\nconst mapStateToProps = (state) => ({\n  parcelles: state.metadata.parcelles,\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MeteoRadar);"]},"metadata":{},"sourceType":"module"}