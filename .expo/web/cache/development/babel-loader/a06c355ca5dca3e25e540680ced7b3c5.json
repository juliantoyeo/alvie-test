{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/HygoMap.js\";\nimport React, { useState, useEffect, useRef, createRef } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport MapView, { Polygon } from 'react-native-maps';\nimport COLORS from \"../colors\";\n\nvar HygoMap = function HygoMap(_ref) {\n  var intervention = _ref.intervention,\n      byParcelle = _ref.byParcelle,\n      handleFieldSelection = _ref.handleFieldSelection;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      mapregion = _useState2[0],\n      setRegion = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selected = _useState4[0],\n      setSelected = _useState4[1];\n\n  var polygons = useRef([]);\n\n  if (polygons.current.length !== intervention.fields.length) {\n    polygons.current = Array(intervention.fields.length).fill().map(function (_, i) {\n      return polygons.current[i] || createRef();\n    });\n  }\n\n  useEffect(function () {\n    if (!intervention.id) {\n      return;\n    }\n\n    setRegion({\n      latitude: intervention.avglatCentroid || intervention.fields[0].latCentroid,\n      longitude: intervention.avglonCentroid || intervention.fields[0].lonCentroid,\n      latitudeDelta: intervention.lat_delta || 0.0222,\n      longitudeDelta: intervention.lon_delta || 0.0121\n    });\n  }, [intervention]);\n\n  var onRegionChange = function onRegionChange() {};\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, mapregion && React.createElement(MapView, {\n    provider: \"google\",\n    mapType: \"hybrid\",\n    initialRegion: mapregion,\n    style: styles.map,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, intervention.fields.map(function (field, idx) {\n    return React.createElement(Polygon, {\n      key: idx,\n      strokeWidth: selected === idx ? 4 : 1,\n      strokeColor: selected === idx ? '#fff' : COLORS.DARK_GREEN,\n      fillColor: byParcelle[field.parcelleId] && byParcelle[field.parcelleId].condition ? COLORS[byParcelle[field.parcelleId].condition] : field.colorField || COLORS.DEFAULT_FIELD_MY,\n      ref: function ref(_ref2) {\n        return polygons.current[idx] = _ref2;\n      },\n      onLayout: function onLayout() {\n        return polygons.current[idx].setNativeProps({\n          fillColor: byParcelle[field.parcelleId] && byParcelle[field.parcelleId].condition ? COLORS[byParcelle[field.parcelleId].condition] : field.colorField || COLORS.DEFAULT_FIELD_MY\n        });\n      },\n      tappable: true,\n      onPress: function onPress() {\n        var i = idx;\n        var newValue = selected === i ? null : i;\n        setSelected(newValue);\n\n        if (handleFieldSelection) {\n          handleFieldSelection(newValue !== null ? intervention.fields[i] : newValue);\n        }\n      },\n      coordinates: field.featuresRpg.geometry.coordinates[0].map(function (coordinate) {\n        return {\n          latitude: coordinate[1],\n          longitude: coordinate[0]\n        };\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 15\n      }\n    });\n  })));\n};\n\nvar styles = StyleSheet.create({\n  map: {\n    justifyContent: \"center\",\n    flexDirection: 'column',\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').width\n  }\n});\nexport default HygoMap;","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/HygoMap.js"],"names":["React","useState","useEffect","useRef","createRef","MapView","Polygon","COLORS","HygoMap","intervention","byParcelle","handleFieldSelection","mapregion","setRegion","selected","setSelected","polygons","current","length","fields","Array","fill","map","_","i","id","latitude","avglatCentroid","latCentroid","longitude","avglonCentroid","lonCentroid","latitudeDelta","lat_delta","longitudeDelta","lon_delta","onRegionChange","styles","field","idx","DARK_GREEN","parcelleId","condition","colorField","DEFAULT_FIELD_MY","ref","setNativeProps","fillColor","newValue","featuresRpg","geometry","coordinates","coordinate","StyleSheet","create","justifyContent","flexDirection","width","Dimensions","get","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, createRef } from 'react'\nimport { Dimensions, StyleSheet, View, Alert } from 'react-native'\nimport  MapView, {Polygon} from 'react-native-maps';\n\nimport COLORS from '../colors'\n\nconst HygoMap = ({ intervention, byParcelle, handleFieldSelection }) => {\n  const [mapregion, setRegion] = useState(null)\n  const [selected, setSelected] = useState(null)\n\n  const polygons = useRef([]);\n  if (polygons.current.length !== intervention.fields.length) {\n    polygons.current = Array(intervention.fields.length).fill().map((_, i) => polygons.current[i] || createRef())\n  }\n\n  useEffect(() => {\n    if (!intervention.id) { return } \n\n    setRegion({\n      latitude: intervention.avglatCentroid || intervention.fields[0].latCentroid,\n      longitude: intervention.avglonCentroid || intervention.fields[0].lonCentroid,\n      latitudeDelta: intervention.lat_delta || 0.0222,\n      longitudeDelta: intervention.lon_delta || 0.0121,\n    })\n  }, [intervention])\n\n  const onRegionChange = () => {}\n\n  return (\n    <View>\n      { mapregion && (\n        <MapView\n          provider=\"google\"\n          mapType=\"hybrid\"\n          initialRegion={mapregion}\n          style={styles.map}>\n\n          { intervention.fields.map((field, idx) => {\n            return (\n              <Polygon\n                key={idx}\n                strokeWidth={selected === idx ? 4 : 1}\n                strokeColor={selected === idx ? '#fff' : COLORS.DARK_GREEN}\n                fillColor={byParcelle[field.parcelleId] && byParcelle[field.parcelleId].condition ? COLORS[byParcelle[field.parcelleId].condition] : (field.colorField||COLORS.DEFAULT_FIELD_MY)}\n                ref={ref => (polygons.current[idx] = ref)}\n                onLayout={() => polygons.current[idx].setNativeProps({\n                    fillColor: byParcelle[field.parcelleId] && byParcelle[field.parcelleId].condition ? COLORS[byParcelle[field.parcelleId].condition] : (field.colorField||COLORS.DEFAULT_FIELD_MY)\n                })}\n                tappable={true}\n                onPress={() => {\n                  let i = idx\n\n                  let newValue = selected === i ? null : i\n                  setSelected(newValue)\n\n                  if (handleFieldSelection) {\n                    handleFieldSelection(newValue !== null ? intervention.fields[i] : newValue)\n                  }\n                }}\n                coordinates={field.featuresRpg.geometry.coordinates[0].map((coordinate) => {\n                  return {\n                    latitude: coordinate[1],\n                    longitude: coordinate[0],\n                  }\n                })}\n              />  \n            );\n          })}\n        </MapView>\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  map: {\n    justifyContent :\"center\",\n    flexDirection: 'column',\n    width: Dimensions.get('window').width,\n    height : Dimensions.get('window').width,\n  }\n})\n\nexport default HygoMap"]},"metadata":{},"sourceType":"module"}