{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/screens/BarCodeScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { SafeAreaView } from 'react-navigation';\nimport { Text } from 'react-native-elements';\nimport { Content, Spinner } from 'native-base';\nimport * as Permissions from 'expo-permissions';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { connect } from 'react-redux';\nimport { updateAuthInfo as _updateAuthInfo } from \"../store/actions/authActions\";\nimport { updatePhytoProductList as _updatePhytoProductList, updatePulvInfo as _updatePulvInfo } from \"../store/actions/pulveActions\";\nimport { updateParcellesList as _updateParcellesList, updateCulturesList as _updateCulturesList } from \"../store/actions/metaActions\";\nimport { signInWithBarCode, checkToken as _checkToken, storePushToken, getPhytoProducts, getFields, getCultures, checkSetup } from \"../api/hygoApi\";\nimport { Notifications } from 'expo';\nimport * as Device from 'expo-device';\nimport COLORS from \"../colors\";\nimport i18n from 'i18n-js';\nimport HygoButton from \"../components/HygoButton\";\nimport LogoLoading from \"../components/LogoLoading\";\nimport { Amplitude, AMPLITUDE_EVENTS } from \"../amplitude\";\nvar ampEvent = AMPLITUDE_EVENTS.barCodeScreen;\n\nvar BarCodeScreen = function (_React$Component) {\n  _inherits(BarCodeScreen, _React$Component);\n\n  var _super = _createSuper(BarCodeScreen);\n\n  function BarCodeScreen(props) {\n    var _this;\n\n    _classCallCheck(this, BarCodeScreen);\n\n    _this = _super.call(this, props);\n\n    _this.getPermissionsAsync = function _callee() {\n      var _await$Permissions$as, status, code;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA));\n\n            case 2:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n\n              _this.setState({\n                hasCameraPermission: status === 'granted'\n              });\n\n              if (Device.isDevice) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(BarCodeScanner.scanFromURLAsync('https://alvie-mvp.s3-eu-west-1.amazonaws.com/barcode+test.png'));\n\n            case 8:\n              code = _context.sent;\n\n              _this.handleBarCodeScanned(code[0]);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.registerForPushNotificationsAsync = function _callee2(deviceid) {\n      var _await$Permissions$as2, status, pushToken;\n\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n            case 2:\n              _await$Permissions$as2 = _context2.sent;\n              status = _await$Permissions$as2.status;\n\n              if (!(status !== 'granted')) {\n                _context2.next = 6;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 6:\n              _context2.next = 8;\n              return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n            case 8:\n              pushToken = _context2.sent;\n              return _context2.abrupt(\"return\", storePushToken(pushToken, deviceid));\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.gotoNextScreen = function _callee3(token, userName, familyName, deviceid, deviceType, hasEquipment) {\n      var phytoProductSelected, culturesSelected, _await$checkSetup, result, error, _await$Promise$all, _await$Promise$all2, fields, cultures;\n\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('token', token));\n\n            case 2:\n              Amplitude.setUserId(deviceid + \"-\" + userName + \"-\" + familyName);\n              Amplitude.logEventWithProperties(ampEvent.loggedin, {\n                timestamp: Date.now(),\n                token: token,\n                userName: userName,\n                familyName: familyName,\n                deviceid: deviceid,\n                deviceType: deviceType,\n                hasEquipment: hasEquipment\n              });\n              _context3.next = 6;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('phytoProductSelected'));\n\n            case 6:\n              phytoProductSelected = _context3.sent;\n              _context3.next = 9;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('culturesSelected'));\n\n            case 9:\n              culturesSelected = _context3.sent;\n              _context3.next = 12;\n              return _regeneratorRuntime.awrap(_this.props.updateAuthInfo({\n                token: token,\n                userName: userName,\n                familyName: familyName,\n                deviceid: deviceid,\n                deviceType: deviceType\n              }));\n\n            case 12:\n              phytoProductSelected = phytoProductSelected == null ? [] : JSON.parse(phytoProductSelected);\n              culturesSelected = culturesSelected == null ? [] : JSON.parse(culturesSelected);\n              _context3.next = 16;\n              return _regeneratorRuntime.awrap(_this.props.updatePulvInfo({\n                phytoProductSelected: phytoProductSelected,\n                culturesSelected: culturesSelected\n              }));\n\n            case 16:\n              _context3.next = 18;\n              return _regeneratorRuntime.awrap(checkSetup());\n\n            case 18:\n              _await$checkSetup = _context3.sent;\n              result = _await$checkSetup.result;\n              error = _await$checkSetup.error;\n\n              if (result) {\n                _context3.next = 25;\n                break;\n              }\n\n              _this.props.navigation.replace('WaitActivation', {\n                error: error\n              });\n\n              _context3.next = 34;\n              break;\n\n            case 25:\n              _context3.next = 27;\n              return _regeneratorRuntime.awrap(Promise.all([getFields(), getCultures()]));\n\n            case 27:\n              _await$Promise$all = _context3.sent;\n              _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n              fields = _await$Promise$all2[0];\n              cultures = _await$Promise$all2[1];\n\n              _this.props.updateParcellesList(fields);\n\n              _this.props.updateCulturesList(cultures);\n\n              if (hasEquipment) {\n                _this.props.navigation.replace('main');\n              } else {\n                _this.props.navigation.replace('BarCodeValidationScreen');\n              }\n\n            case 34:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.handleBarCodeScanned = function _callee4(_ref) {\n      var type, data, _await$signInWithBarC, token, errorMessage, userName, familyName, deviceid, deviceType, hasEquipment;\n\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              type = _ref.type, data = _ref.data;\n\n              _this.setState({\n                tokenLoading: true\n              });\n\n              _context4.next = 4;\n              return _regeneratorRuntime.awrap(signInWithBarCode(data));\n\n            case 4:\n              _await$signInWithBarC = _context4.sent;\n              token = _await$signInWithBarC.token;\n              errorMessage = _await$signInWithBarC.errorMessage;\n              userName = _await$signInWithBarC.userName;\n              familyName = _await$signInWithBarC.familyName;\n              deviceid = _await$signInWithBarC.deviceid;\n              deviceType = _await$signInWithBarC.deviceType;\n              hasEquipment = _await$signInWithBarC.hasEquipment;\n\n              if (!(!errorMessage && token)) {\n                _context4.next = 17;\n                break;\n              }\n\n              _context4.next = 15;\n              return _regeneratorRuntime.awrap(_this.gotoNextScreen(token, userName, familyName, deviceid, deviceType, hasEquipment));\n\n            case 15:\n              _context4.next = 20;\n              break;\n\n            case 17:\n              _this.setState({\n                qrError: errorMessage\n              });\n\n              _this.setState({\n                tokenLoading: false\n              });\n\n              _this.setState({\n                scanned: true\n              });\n\n            case 20:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      hasCameraPermission: null,\n      scanned: false,\n      loading: true,\n      tokenLoading: false,\n      qrError: null\n    };\n    return _this;\n  }\n\n  _createClass(BarCodeScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var storedToken, _await$checkToken, errorMessage, userName, familyName, deviceid, deviceType, hasEquipment;\n\n      return _regeneratorRuntime.async(function componentDidMount$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.t0 = this.props;\n              _context5.next = 3;\n              return _regeneratorRuntime.awrap(getPhytoProducts());\n\n            case 3:\n              _context5.t1 = _context5.sent;\n\n              _context5.t0.updatePhytoProductList.call(_context5.t0, _context5.t1);\n\n              _context5.next = 7;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('token'));\n\n            case 7:\n              storedToken = _context5.sent;\n              _context5.next = 10;\n              return _regeneratorRuntime.awrap(_checkToken(storedToken));\n\n            case 10:\n              _await$checkToken = _context5.sent;\n              errorMessage = _await$checkToken.errorMessage;\n              userName = _await$checkToken.userName;\n              familyName = _await$checkToken.familyName;\n              deviceid = _await$checkToken.deviceid;\n              deviceType = _await$checkToken.deviceType;\n              hasEquipment = _await$checkToken.hasEquipment;\n\n              if (errorMessage) {\n                _context5.next = 22;\n                break;\n              }\n\n              _context5.next = 20;\n              return _regeneratorRuntime.awrap(this.gotoNextScreen(storedToken, userName, familyName, deviceid, deviceType, hasEquipment));\n\n            case 20:\n              _context5.next = 24;\n              break;\n\n            case 22:\n              this.setState({\n                loading: false,\n                qrError: errorMessage\n              });\n              this.getPermissionsAsync();\n\n            case 24:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          hasCameraPermission = _this$state.hasCameraPermission,\n          scanned = _this$state.scanned,\n          tokenLoading = _this$state.tokenLoading;\n      return React.createElement(SafeAreaView, {\n        style: [styles.statusbar, {\n          backgroundColor: 'black',\n          flex: 1,\n          display: 'flex'\n        }],\n        forceInset: {\n          top: 'always'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 7\n        }\n      }, this.state.loading && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }\n      }, React.createElement(StatusBar, {\n        translucent: true,\n        backgroundColor: \"transparent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }\n      }), React.createElement(ImageBackground, {\n        source: require(\"../../assets/blue_back.png\"),\n        imageStyle: {\n          resizeMode: 'cover',\n          flex: 1\n        },\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: [StyleSheet.absoluteFill, {\n          flex: 1,\n          backgroundColor: '#000',\n          opacity: .6\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }\n      }), React.createElement(View, {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }\n      }, React.createElement(LogoLoading, {\n        duration: 1000,\n        color: \"#fff\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }\n      })))), !this.state.loading && hasCameraPermission === false && React.createElement(Content, {\n        contentContainerStyle: {\n          justifyContent: 'center',\n          flex: 1,\n          padding: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: COLORS.DARK_BLUE,\n          textAlign: 'center',\n          fontSize: 24,\n          fontFamily: 'nunito-regular'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }\n      }, i18n.t('bar_code.camera_description')), React.createElement(View, {\n        style: [StyleSheet.absoluteFill, {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'flex-end'\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }\n      }, React.createElement(HygoButton, {\n        onPress: function onPress() {\n          return _this2.getPermissionsAsync();\n        },\n        label: i18n.t('bar_code.retry_camera'),\n        icon: {\n          type: 'EvilIcons',\n          name: 'refresh'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }\n      }))), !this.state.loading && hasCameraPermission && React.createElement(BarCodeScanner, {\n        onBarCodeScanned: scanned || tokenLoading ? undefined : this.handleBarCodeScanned,\n        style: [StyleSheet.absoluteFill, {\n          display: 'flex'\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: {\n          backgroundColor: COLORS.BEIGE,\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          padding: 36,\n          paddingTop: 90,\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        textAlign: \"center\",\n        style: {\n          color: COLORS.DARK_BLUE,\n          textAlign: 'center',\n          fontSize: 24,\n          flex: 1,\n          fontFamily: 'nunito-regular'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 19\n        }\n      }, i18n.t('bar_code.welcome')), React.createElement(Text, {\n        textAlign: \"center\",\n        style: {\n          color: COLORS.DARK_GREEN,\n          textAlign: 'center',\n          fontSize: 18,\n          flex: 1,\n          fontFamily: 'nunito-regular'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 19\n        }\n      }, i18n.t('bar_code.notice')))), React.createElement(View, {\n        style: {\n          height: 300,\n          display: 'flex',\n          flexDirection: 'row',\n          backgroundColor: tokenLoading ? '#000' : 'transparent'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 15\n        }\n      }, React.createElement(View, {\n        style: {\n          backgroundColor: COLORS.BEIGE,\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        style: {\n          backgroundColor: scanned || tokenLoading ? 'rgba(255, 255, 255, .6)' : 'transparent',\n          flexDirection: 'column',\n          width: 300,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 17\n        }\n      }, scanned && React.createElement(Text, {\n        textAlign: \"center\",\n        style: {\n          color: COLORS.DARK_BLUE,\n          textAlign: 'center',\n          fontSize: 24,\n          fontFamily: 'nunito-bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }\n      }, i18n.t(\"bar_code.qr_error.\" + (this.state.qrError == 'SIGNIN_ERROR' ? 'signin' : 'network'))), tokenLoading && React.createElement(Spinner, {\n        color: COLORS.DARK_BLUE,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }\n      })), React.createElement(View, {\n        style: {\n          backgroundColor: COLORS.BEIGE,\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 17\n        }\n      })), React.createElement(View, {\n        style: {\n          backgroundColor: COLORS.BEIGE,\n          height: 90\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 15\n        }\n      })), React.createElement(View, {\n        style: [StyleSheet.absoluteFill, {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'flex-end'\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 9\n        }\n      }, scanned && React.createElement(HygoButton, {\n        onPress: function onPress() {\n          return _this2.setState({\n            scanned: false\n          });\n        },\n        label: i18n.t('bar_code.retry_barcode'),\n        icon: {\n          type: 'EvilIcons',\n          name: 'refresh'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n\n  return BarCodeScreen;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    flex: 1,\n    display: 'flex',\n    paddingLeft: 38,\n    paddingRight: 38,\n    alignItems: 'center',\n    resizeMode: 'cover'\n  }\n});\n\nBarCodeScreen.navigationOptions = function () {\n  return {\n    header: null\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, props) {\n  return {\n    updateAuthInfo: function updateAuthInfo(params) {\n      return dispatch(_updateAuthInfo(params));\n    },\n    updatePulvInfo: function updatePulvInfo(params) {\n      return dispatch(_updatePulvInfo(params));\n    },\n    checkToken: function checkToken(token) {\n      return dispatch(_checkToken(token));\n    },\n    updatePhytoProductList: function updatePhytoProductList(l) {\n      return dispatch(_updatePhytoProductList(l));\n    },\n    updateParcellesList: function updateParcellesList(l) {\n      return dispatch(_updateParcellesList(l));\n    },\n    updateCulturesList: function updateCulturesList(l) {\n      return dispatch(_updateCulturesList(l));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(BarCodeScreen);","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/screens/BarCodeScreen.js"],"names":["React","SafeAreaView","Text","Content","Spinner","Permissions","BarCodeScanner","connect","updateAuthInfo","updatePhytoProductList","updatePulvInfo","updateParcellesList","updateCulturesList","signInWithBarCode","checkToken","storePushToken","getPhytoProducts","getFields","getCultures","checkSetup","Notifications","Device","COLORS","i18n","HygoButton","LogoLoading","Amplitude","AMPLITUDE_EVENTS","ampEvent","barCodeScreen","BarCodeScreen","props","getPermissionsAsync","askAsync","CAMERA","status","setState","hasCameraPermission","isDevice","scanFromURLAsync","code","handleBarCodeScanned","registerForPushNotificationsAsync","deviceid","NOTIFICATIONS","getExpoPushTokenAsync","pushToken","gotoNextScreen","token","userName","familyName","deviceType","hasEquipment","AsyncStorage","setItem","setUserId","logEventWithProperties","loggedin","timestamp","Date","now","getItem","phytoProductSelected","culturesSelected","JSON","parse","result","error","navigation","replace","Promise","all","fields","cultures","type","data","tokenLoading","errorMessage","qrError","scanned","state","loading","storedToken","styles","statusbar","backgroundColor","flex","display","top","require","resizeMode","container","StyleSheet","absoluteFill","opacity","alignItems","justifyContent","padding","color","DARK_BLUE","textAlign","fontSize","fontFamily","t","flexDirection","name","undefined","BEIGE","paddingTop","DARK_GREEN","height","width","Component","create","paddingLeft","paddingRight","navigationOptions","header","mapDispatchToProps","dispatch","params","l"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, StatusBar, ImageBackground, View, AsyncStorage } from 'react-native';\nimport { SafeAreaView } from 'react-navigation';\nimport { Text } from 'react-native-elements';\nimport { Content, Spinner } from 'native-base';\nimport * as Permissions from 'expo-permissions';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { connect } from 'react-redux';\nimport { updateAuthInfo } from '../store/actions/authActions';\nimport { updatePhytoProductList, updatePulvInfo } from '../store/actions/pulveActions'\nimport { updateParcellesList, updateCulturesList } from '../store/actions/metaActions'\nimport { signInWithBarCode, checkToken, storePushToken, getPhytoProducts, getFields, getCultures, checkSetup } from '../api/hygoApi';\nimport { Notifications } from 'expo';\n//import { getLocationPermissionAsync } from '../geolocation'\nimport * as Device from 'expo-device';\nimport COLORS from '../colors'\nimport i18n from 'i18n-js';\nimport HygoButton from '../components/HygoButton'\nimport LogoLoading from '../components/LogoLoading'\nimport {Amplitude, AMPLITUDE_EVENTS} from '../amplitude'\n\nconst {barCodeScreen: ampEvent} = AMPLITUDE_EVENTS\n\nclass BarCodeScreen extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      hasCameraPermission: null,\n      scanned: false,\n      loading: true,\n      tokenLoading: false,\n      qrError: null\n    };\n  }\n  getPermissionsAsync = async () => {\n    const { status } = await Permissions.askAsync(Permissions.CAMERA);\n    this.setState({ hasCameraPermission: status === 'granted' });\n\n    if (!Device.isDevice) {\n      let code = await BarCodeScanner.scanFromURLAsync('https://alvie-mvp.s3-eu-west-1.amazonaws.com/barcode+test.png')//https://alvie-mvp.s3-eu-west-1.amazonaws.com/qr-code8+(1).png')\n      this.handleBarCodeScanned(code[0])\n    }\n  };\n\n  registerForPushNotificationsAsync = async (deviceid) => {\n    const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n    if (status !== 'granted') {\n      return;\n    }\n    // Get the token that identifies this device\n    const pushToken = await Notifications.getExpoPushTokenAsync();\n\n    // POST the token to the backend server\n    return storePushToken(pushToken, deviceid)\n  }\n\n  async componentDidMount() {\n    //await getLocationPermissionAsync(i18n.t('geolocation.text'))\n\n    this.props.updatePhytoProductList(await getPhytoProducts())\n\n    let storedToken = await AsyncStorage.getItem('token');\n    let {errorMessage, userName, familyName, deviceid, deviceType, hasEquipment} = await checkToken(storedToken);\n\n    if(!errorMessage) {\n      await this.gotoNextScreen(storedToken, userName, familyName, deviceid, deviceType, hasEquipment)\n    } else {\n      this.setState({ loading: false, qrError: errorMessage})\n      this.getPermissionsAsync();\n    }\n  }\n\n  gotoNextScreen = async (token, userName, familyName, deviceid, deviceType, hasEquipment) => {\n    await AsyncStorage.setItem('token', token);\n\n    Amplitude.setUserId(`${deviceid}-${userName}-${familyName}`)\n    // console.log(\"Amplitude : \", ampEvent.loggedin)\n    Amplitude.logEventWithProperties(ampEvent.loggedin, {\n      timestamp: Date.now(),\n      token,\n      userName,\n      familyName,\n      deviceid,\n      deviceType,\n      hasEquipment\n    })\n\n    let phytoProductSelected = await AsyncStorage.getItem('phytoProductSelected');\n    let culturesSelected = await AsyncStorage.getItem('culturesSelected');\n    await this.props.updateAuthInfo({\n      token,\n      userName, familyName, deviceid, deviceType\n    })\n    phytoProductSelected = phytoProductSelected == null ? [] : JSON.parse(phytoProductSelected)\n    culturesSelected = culturesSelected == null ? [] : JSON.parse(culturesSelected)\n    \n    await this.props.updatePulvInfo({\n      phytoProductSelected, \n      culturesSelected\n    })\n    \n    const {result, error} = await checkSetup()\n    if (!result)\n      this.props.navigation.replace('WaitActivation', {error});\n    else {\n      let [ fields, cultures ] = await Promise.all([\n        getFields(),\n        getCultures(),\n      ])\n      this.props.updateParcellesList(fields)\n      this.props.updateCulturesList(cultures)\n  \n      // TODO debug this\n      // await this.registerForPushNotificationsAsync(deviceid)\n  \n      if (hasEquipment) {\n        this.props.navigation.replace('main');\n      } else {\n        this.props.navigation.replace('BarCodeValidationScreen')\n      }\n    }\n  }\n    \n\n  handleBarCodeScanned = async ({ type, data }) => {\n    this.setState({ tokenLoading: true });\n\n    const {token, errorMessage, userName,familyName, deviceid, deviceType, hasEquipment} = await signInWithBarCode(data);\n    if(!errorMessage && token) {\n      await this.gotoNextScreen(token, userName, familyName, deviceid, deviceType, hasEquipment)\n    } else {\n      this.setState({ qrError: errorMessage})\n      this.setState({ tokenLoading: false });\n      this.setState({ scanned: true });\n\n    }\n  };\n\n  render() {\n    const { hasCameraPermission, scanned, tokenLoading } = this.state;\n\n    return (\n      <SafeAreaView style={[styles.statusbar, { backgroundColor: 'black', flex: 1, display: 'flex' }]} forceInset={{top:'always'}}>\n        { this.state.loading && (\n          <React.Fragment>\n          <StatusBar translucent backgroundColor=\"transparent\" />\n          <ImageBackground source={require('../../assets/blue_back.png')} imageStyle={{  resizeMode: 'cover', flex: 1 }} style={styles.container}>\n            <View style={[StyleSheet.absoluteFill, { flex: 1, backgroundColor: '#000', opacity: .6 }]}></View>\n            <View style={{ display: 'flex', alignItems: 'center' }}>\n              <LogoLoading duration={1000} color={\"#fff\"} />\n            </View>\n          </ImageBackground>\n          </React.Fragment>\n        )}\n\n        { !this.state.loading && hasCameraPermission === false && (\n          <Content contentContainerStyle={{ justifyContent: 'center', flex: 1, padding: 20 }}>\n            <Text style={{\n              color: COLORS.DARK_BLUE,\n              textAlign: 'center',\n              fontSize: 24,\n              fontFamily: 'nunito-regular'\n            }}>{i18n.t('bar_code.camera_description')}</Text>\n\n            <View style={[StyleSheet.absoluteFill, { \n              display: 'flex', \n              flexDirection: 'column',\n              alignItems: 'center', \n              justifyContent: 'flex-end' }]}>\n    \n                <HygoButton onPress={() => this.getPermissionsAsync()} label={i18n.t('bar_code.retry_camera')} icon={{\n                  type: 'EvilIcons',\n                  name: 'refresh'\n                }} />\n            </View>\n          </Content>\n        )}\n        \n        { !this.state.loading && hasCameraPermission && (\n          <BarCodeScanner\n            onBarCodeScanned={scanned || tokenLoading ? undefined : this.handleBarCodeScanned}\n            style={[StyleSheet.absoluteFill, {display: 'flex'}]}>\n              <View style={{ \n                backgroundColor: COLORS.BEIGE, \n                flex: 1, \n                display: 'flex', \n                flexDirection:'row',\n                alignItems:'center',\n                padding: 36,\n                paddingTop: 90,\n                justifyContent:'center' }}>\n\n                <View style={{ flex: 1, display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center'}}>\n                  <Text textAlign=\"center\" style={{\n                    color: COLORS.DARK_BLUE,\n                    textAlign: 'center',\n                    fontSize: 24,\n                    flex: 1,\n                    fontFamily: 'nunito-regular'\n                  }}>{i18n.t('bar_code.welcome')}</Text>\n\n                  <Text textAlign=\"center\" style={{\n                    color: COLORS.DARK_GREEN,\n                    textAlign: 'center',\n                    fontSize: 18,\n                    flex: 1,\n                    fontFamily: 'nunito-regular'\n                  }}>{i18n.t('bar_code.notice')}</Text>\n                </View>\n              </View>\n              <View style={{ height: 300, display: 'flex', flexDirection: 'row', backgroundColor: tokenLoading ? '#000' : 'transparent' }}>\n                <View style={{ backgroundColor: COLORS.BEIGE, flex: 1 }}></View>\n                <View style={{ backgroundColor: scanned || tokenLoading ? 'rgba(255, 255, 255, .6)' : 'transparent', flexDirection: 'column', width: 300, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                  { scanned && (\n                    <Text textAlign=\"center\" style={{\n                      color: COLORS.DARK_BLUE,\n                      textAlign: 'center',\n                      fontSize: 24,\n                      fontFamily: 'nunito-bold'\n                    }}>{i18n.t(`bar_code.qr_error.${this.state.qrError == 'SIGNIN_ERROR' ? 'signin' : 'network' }`)}</Text>\n                  )}\n\n                  { tokenLoading && (\n                    <Spinner color={COLORS.DARK_BLUE} />\n                  )}\n                </View>\n                <View style={{ backgroundColor: COLORS.BEIGE, flex: 1 }}></View>\n              </View>\n              <View style={{ backgroundColor: COLORS.BEIGE, height: 90 }} />\n          </BarCodeScanner>\n        )}\n\n        <View style={[StyleSheet.absoluteFill, { \n          display: 'flex', \n          flexDirection: 'column',\n          alignItems: 'center', \n          justifyContent: 'flex-end' }]}>\n\n          {scanned && (\n            <HygoButton onPress={() => this.setState({ scanned: false })} label={i18n.t('bar_code.retry_barcode')} icon={{\n              type: 'EvilIcons',\n              name: 'refresh'\n            }} />\n          )}\n        </View>\n      </SafeAreaView>     \n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: { \n    justifyContent: 'center', \n    flex: 1, \n    display: 'flex', \n    paddingLeft: 38, \n    paddingRight: 38, \n    alignItems: 'center',\n    resizeMode: 'cover'\n  },\n})\n\nBarCodeScreen.navigationOptions = () => {\n  return {\n      header: null\n  }\n}\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  updateAuthInfo: (params) => dispatch(updateAuthInfo(params)),\n  updatePulvInfo: (params) => dispatch(updatePulvInfo(params)),\n  checkToken: (token) => dispatch(checkToken(token)),\n  updatePhytoProductList: (l) => dispatch(updatePhytoProductList(l)),\n  updateParcellesList: (l) => dispatch(updateParcellesList(l)),\n  updateCulturesList: (l) => dispatch(updateCulturesList(l)),\n})\n\nexport default connect(null, mapDispatchToProps)(BarCodeScreen);"]},"metadata":{},"sourceType":"module"}