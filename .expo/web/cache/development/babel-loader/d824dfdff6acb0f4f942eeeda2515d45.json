{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/realtime/HygoChart.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport formatTime from \"../../utils/formatTime\";\nimport { Defs, LinearGradient, Stop } from \"react-native-svg\";\nimport { VictoryArea, VictoryChart, VictoryTheme, VictoryAxis, VictoryScatter, VictoryLabel } from \"victory-native\";\n\nvar HygoChart = function HygoChart(_ref) {\n  var data = _ref.data,\n      mainColor = _ref.mainColor,\n      secondaryColor = _ref.secondaryColor,\n      label = _ref.label;\n\n  var getDomain = function getDomain() {\n    var min = Math.min.apply(Math, _toConsumableArray(data.map(function (d) {\n      return d.y;\n    }))),\n        max = Math.max.apply(Math, _toConsumableArray(data.map(function (d) {\n      return d.y;\n    })));\n    return min == max ? {\n      y: [min - 1, max + 1]\n    } : {\n      y: [min - 0.15 * (max - min), max]\n    };\n  };\n\n  var getAreaData = function getAreaData() {\n    var min = Math.min.apply(Math, _toConsumableArray(data.map(function (d) {\n      return d.y;\n    }))),\n        max = Math.max.apply(Math, _toConsumableArray(data.map(function (d) {\n      return d.y;\n    })));\n    return data.map(function (d) {\n      return _objectSpread({}, d, {\n        y0: min - 0.10 * (max - min)\n      });\n    });\n  };\n\n  return React.createElement(View, {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, React.createElement(VictoryChart, {\n    domainPadding: {\n      x: 15\n    },\n    scale: {\n      x: \"time\"\n    },\n    padding: {\n      top: 30,\n      bottom: 30,\n      left: 50,\n      right: 30\n    },\n    width: Dimensions.get('window').width,\n    height: 210,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, React.createElement(Defs, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, React.createElement(LinearGradient, {\n    id: \"gradientFill\",\n    x1: \"0%\",\n    y1: \"0%\",\n    x2: \"0%\",\n    y2: \"100%\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, React.createElement(Stop, {\n    offset: \"20%\",\n    stopColor: secondaryColor,\n    stopOpacity: \"0.7\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }), React.createElement(Stop, {\n    offset: \"100%\",\n    stopColor: mainColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }))), React.createElement(VictoryAxis, {\n    dependentAxis: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), React.createElement(VictoryAxis, {\n    tickFormat: function tickFormat(x) {\n      return formatTime(x, 'h');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), React.createElement(VictoryArea, {\n    style: {\n      data: {\n        fill: 'url(#gradientFill)',\n        stroke: mainColor,\n        strokeWidth: 2\n      }\n    },\n    animate: {\n      duration: 2000,\n      onLoad: {\n        duration: 1000\n      }\n    },\n    domain: getDomain(),\n    data: getAreaData(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), React.createElement(VictoryLabel, {\n    text: label.toLocaleUpperCase(),\n    textAnchor: \"middle\",\n    verticalAnchor: \"middle\",\n    y: 160,\n    x: Dimensions.get('window').width / 2,\n    style: {\n      fill: '#fff',\n      fontSize: 16,\n      fontWeight: 500\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), React.createElement(VictoryScatter, {\n    style: {\n      data: {\n        fill: mainColor\n      }\n    },\n    size: 4,\n    data: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default HygoChart;","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/realtime/HygoChart.js"],"names":["React","formatTime","Defs","LinearGradient","Stop","VictoryArea","VictoryChart","VictoryTheme","VictoryAxis","VictoryScatter","VictoryLabel","HygoChart","data","mainColor","secondaryColor","label","getDomain","min","Math","map","d","y","max","getAreaData","y0","display","alignItems","justifyContent","x","top","bottom","left","right","Dimensions","get","width","fill","stroke","strokeWidth","duration","onLoad","toLocaleUpperCase","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { View, Dimensions } from 'react-native'\nimport formatTime from '../../utils/formatTime'\nimport { Defs, LinearGradient, Stop } from \"react-native-svg\";\nimport { VictoryArea, VictoryChart, VictoryTheme, VictoryAxis, VictoryScatter, VictoryLabel } from \"victory-native\";\n\nconst HygoChart = ({ data, mainColor, secondaryColor, label }) => {\n  const getDomain = () => {\n    let min = Math.min(...data.map(d => d.y)), max = Math.max(...data.map(d => d.y))\n    return (min == max) ? { \n      y: [\n        min - 1,\n        max +1\n      ] \n    } : { \n      y: [\n        min - 0.15 * (max - min),\n        max\n      ] \n    }\n  }\n\n  const getAreaData = () => {\n    let min = Math.min(...data.map(d => d.y)), max = Math.max(...data.map(d => d.y))\n    return data.map(d => {\n      return {\n        ...d,\n        y0: min - 0.10 * (max - min),\n      }\n    })\n  }\n\n  return (\n    <View style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <VictoryChart\n        //theme={VictoryTheme.material}\n        domainPadding={{x: 15 }}\n        scale={{ x: \"time\" }}\n        padding={{ top: 30, bottom: 30, left: 50, right: 30 }}\n        width={Dimensions.get('window').width}\n        height={210}>\n        <Defs>\n          <LinearGradient id=\"gradientFill\"\n            x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <Stop offset=\"20%\" stopColor={secondaryColor} stopOpacity=\"0.7\"/>\n            <Stop offset=\"100%\" stopColor={mainColor} />\n          </LinearGradient>\n        </Defs>\n        <VictoryAxis dependentAxis />\n        <VictoryAxis tickFormat={(x) => formatTime(x, 'h')} />\n        <VictoryArea\n          style={{ data: { fill: 'url(#gradientFill)', stroke: mainColor, strokeWidth: 2 } }}\n          animate={{\n            duration: 2000,\n            onLoad: { duration: 1000 }\n          }}\n          domain={getDomain()}\n          data={getAreaData()}\n        />\n        <VictoryLabel \n          text={label.toLocaleUpperCase()}\n          textAnchor=\"middle\" \n          verticalAnchor=\"middle\" \n          y={160} x={Dimensions.get('window').width/2} \n          style={{\n            fill: '#fff',\n            fontSize: 16,\n            fontWeight: 500,\n            //fontFamily: 'nunito-heavy',\n          }}\n          />\n        <VictoryScatter\n          style={{ data: { fill: mainColor } }}\n          size={4}\n          data={data}\n        />\n        </VictoryChart>\n    </View>\n  )\n}\n\nexport default HygoChart"]},"metadata":{},"sourceType":"module"}