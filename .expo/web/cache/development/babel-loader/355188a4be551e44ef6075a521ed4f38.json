{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/HygoMeteoPhyto.js\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport i18n from 'i18n-js';\nimport COLORS from \"../colors\";\nimport { updateUIPhytoProduct, updateUICultures, getMeteoIntervention } from \"../api/hygoApi\";\nimport { connect } from 'react-redux';\nimport { updatePhytoProductSelected as _updatePhytoProductSelected, updateCulturesSelected as _updateCulturesSelected } from \"../store/actions/pulveActions\";\nimport { Amplitude, AMPLITUDE_EVENTS } from \"../amplitude\";\nvar meteoBriefScreen = AMPLITUDE_EVENTS.meteoBriefScreen;\n\nvar HygoMeteoPhyto = function HygoMeteoPhyto(_ref) {\n  var product = _ref.product,\n      navigation = _ref.navigation,\n      updatePhytoProductSelected = _ref.updatePhytoProductSelected,\n      day = _ref.day,\n      hour = _ref.hour,\n      cultures = _ref.cultures,\n      phytoProductSelected = _ref.phytoProductSelected,\n      culturesSelected = _ref.culturesSelected,\n      updateCulturesSelected = _ref.updateCulturesSelected;\n\n  var handleProductClick = function handleProductClick() {\n    return _regeneratorRuntime.async(function handleProductClick$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            Amplitude.logEventWithProperties(meteoBriefScreen.click_hygoMeteoPhyto, {\n              timestamp: Date.now()\n            });\n            updateUIPhytoProduct([product.id]);\n            updateUICultures(cultures.map(function (c) {\n              return c.id;\n            }));\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(updatePhytoProductSelected([product.id]));\n\n          case 5:\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(updateCulturesSelected(cultures.map(function (c) {\n              return c.id;\n            })));\n\n          case 7:\n            navigation.navigate('LoadingScreen', {\n              next: 'NextPulverisationDetails',\n              params: {\n                phytoProductSelected: [product.id],\n                culturesSelected: cultures.map(function (c) {\n                  return c.id;\n                }),\n                day: day,\n                hour: hour\n              },\n              raw: true,\n              action: function action(_ref2) {\n                var phytoProductSelected, culturesSelected, day, hour, data;\n                return _regeneratorRuntime.async(function action$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        phytoProductSelected = _ref2.phytoProductSelected, culturesSelected = _ref2.culturesSelected, day = _ref2.day, hour = _ref2.hour;\n                        _context.next = 3;\n                        return _regeneratorRuntime.awrap(getMeteoIntervention({\n                          products: phytoProductSelected,\n                          cultures: culturesSelected\n                        }));\n\n                      case 3:\n                        data = _context.sent;\n                        return _context.abrupt(\"return\", {\n                          day: day,\n                          hour: hour,\n                          data: data,\n                          r: 2\n                        });\n\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              }\n            });\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: [styles.left, {\n      backgroundColor: COLORS[product.condition]\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.right,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, i18n.t(\"products.\" + product.name)), React.createElement(Text, {\n    style: styles.cardCondition,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, i18n.t(\"meteo.condition_\" + product.condition)), React.createElement(Text, {\n    style: styles.cardParcelle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.buttonContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: [styles.button, {\n      backgroundColor: COLORS[product.condition]\n    }],\n    onPress: handleProductClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, i18n.t('meteo.plan'))))));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    borderTopRightRadius: 30,\n    backgroundColor: 'rgba(255, 255, 255, .4)',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowColor: '#000000',\n    shadowRadius: 2,\n    shadowOpacity: .2,\n    padding: 0,\n    display: 'flex',\n    elevation: 2,\n    marginBottom: 10,\n    flexDirection: 'row'\n  },\n  left: {\n    width: 25\n  },\n  right: {\n    height: 130,\n    padding: 15,\n    flex: 1\n  },\n  cardTitle: {\n    textTransform: 'uppercase',\n    fontFamily: 'nunito-bold',\n    fontSize: 14,\n    color: '#444444'\n  },\n  cardCondition: {\n    color: '#444444',\n    fontFamily: 'nunito-bold',\n    fontSize: 12\n  },\n  cardParcelle: {\n    fontFamily: 'nunito-bold',\n    color: '#444444',\n    fontSize: 12\n  },\n  buttonContainer: {\n    display: 'flex',\n    alignItems: 'flex-end'\n  },\n  button: {\n    height: 30,\n    borderRadius: 15,\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: 15,\n    paddingRight: 20,\n    paddingLeft: 20\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontFamily: 'nunito-regular',\n    textTransform: 'uppercase'\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cultures: state.metadata.cultures,\n    culturesSelected: state.pulve.culturesSelected,\n    phytoProductSelected: state.pulve.phytoProductSelected\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, props) {\n  return {\n    updatePhytoProductSelected: function updatePhytoProductSelected(selected) {\n      return dispatch(_updatePhytoProductSelected(selected));\n    },\n    updateCulturesSelected: function updateCulturesSelected(selected) {\n      return dispatch(_updateCulturesSelected(selected));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HygoMeteoPhyto);","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/HygoMeteoPhyto.js"],"names":["React","i18n","COLORS","updateUIPhytoProduct","updateUICultures","getMeteoIntervention","connect","updatePhytoProductSelected","updateCulturesSelected","Amplitude","AMPLITUDE_EVENTS","meteoBriefScreen","HygoMeteoPhyto","product","navigation","day","hour","cultures","phytoProductSelected","culturesSelected","handleProductClick","logEventWithProperties","click_hygoMeteoPhyto","timestamp","Date","now","id","map","c","navigate","next","params","raw","action","products","data","r","styles","container","left","backgroundColor","condition","right","cardTitle","t","name","cardCondition","cardParcelle","buttonContainer","button","buttonText","StyleSheet","create","borderTopRightRadius","shadowOffset","width","height","shadowColor","shadowRadius","shadowOpacity","padding","display","elevation","marginBottom","flexDirection","flex","textTransform","fontFamily","fontSize","color","alignItems","borderRadius","justifyContent","marginTop","paddingRight","paddingLeft","mapStateToProps","state","metadata","pulve","mapDispatchToProps","dispatch","props","selected"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { View, StyleSheet, Text, TouchableOpacity } from 'react-native'\nimport i18n from 'i18n-js'\n\nimport COLORS from '../colors'\n\nimport { updateUIPhytoProduct, updateUICultures, getMeteoIntervention } from '../api/hygoApi'\n\nimport { connect } from 'react-redux'\nimport { updatePhytoProductSelected, updateCulturesSelected } from '../store/actions/pulveActions'\n\nimport {Amplitude, AMPLITUDE_EVENTS} from '../amplitude'\nconst { meteoBriefScreen } = AMPLITUDE_EVENTS\n\nconst HygoMeteoPhyto = ({ product, navigation, updatePhytoProductSelected, day, hour, cultures, phytoProductSelected, culturesSelected, updateCulturesSelected }) => {\n\n  const handleProductClick = async () => {\n\n    // console.log(\"Amplitude : \", meteoBriefScreen.click_hygoMeteoPhyto)\n    Amplitude.logEventWithProperties(meteoBriefScreen.click_hygoMeteoPhyto, {\n      timestamp: Date.now()\n    })\n\n    updateUIPhytoProduct([ product.id ])\n    updateUICultures(cultures.map(c => c.id))\n\n    await updatePhytoProductSelected([ product.id ])\n    await updateCulturesSelected(cultures.map(c => c.id))\n\n    navigation.navigate('LoadingScreen', {\n      next: 'NextPulverisationDetails',\n      params: {\n        phytoProductSelected: [ product.id ], \n        culturesSelected: cultures.map(c => c.id), \n        day, \n        hour,\n      },\n      raw: true,\n      action: async ({ phytoProductSelected, culturesSelected, day, hour }) => {\n        let data = await getMeteoIntervention({\n          products: phytoProductSelected,\n          cultures: culturesSelected\n        })\n\n        return {\n          day,\n          hour,\n          data,\n          r: 2,\n        }\n      }\n    })\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={[styles.left, { backgroundColor: COLORS[product.condition] }]}></View>\n      <View style={styles.right}>\n        <Text style={styles.cardTitle}>{i18n.t(`products.${product.name}`)}</Text>\n        <Text style={styles.cardCondition}>{i18n.t(`meteo.condition_${product.condition}`)}</Text>\n        <Text style={styles.cardParcelle}>{/*i18n.t('meteo.parcelle_percent', { percent: Math.round(100*product.treatable_percent) })*/}</Text>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity style={[styles.button, {backgroundColor: COLORS[product.condition]}]} onPress={handleProductClick}>\n            <Text style={styles.buttonText}>{i18n.t('meteo.plan')}</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderTopRightRadius: 30,\n    backgroundColor: 'rgba(255, 255, 255, .4)',\n    shadowOffset: { width: 0, height: 2},\n    shadowColor: '#000000',\n    shadowRadius: 2,\n    shadowOpacity: .2,\n    padding: 0,\n    display: 'flex',\n    elevation: 2,\n    marginBottom: 10,\n    flexDirection: 'row'\n  },\n  left: {\n    width: 25\n  },\n  right: {\n    height: 130,\n    padding: 15,\n    flex: 1,\n  },\n  cardTitle: {\n    textTransform: 'uppercase',\n    fontFamily: 'nunito-bold',\n    fontSize: 14,\n    color: '#444444'\n  },\n  cardCondition: {\n    color: '#444444',\n    fontFamily: 'nunito-bold',\n    fontSize: 12,\n  },\n  cardParcelle: {\n    fontFamily: 'nunito-bold',\n    color: '#444444',\n    fontSize: 12,\n  },\n  buttonContainer: {\n    display: 'flex',\n    alignItems: 'flex-end'\n  },\n  button: {\n    height: 30,\n    borderRadius: 15,\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: 15,\n    paddingRight: 20,\n    paddingLeft: 20\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 14,\n    fontFamily: 'nunito-regular',\n    textTransform: 'uppercase'\n  }\n})\n\nconst mapStateToProps = (state) => ({\n  cultures: state.metadata.cultures,\n  culturesSelected: state.pulve.culturesSelected,\n  phytoProductSelected: state.pulve.phytoProductSelected,\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  updatePhytoProductSelected: (selected) => dispatch(updatePhytoProductSelected(selected)),\n  updateCulturesSelected: (selected) => dispatch(updateCulturesSelected(selected)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HygoMeteoPhyto);"]},"metadata":{},"sourceType":"module"}