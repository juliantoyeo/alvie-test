{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/screens/testScreens/SelectSlotScreen.tsx\";\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { SafeAreaView } from 'react-navigation';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { connect } from 'react-redux';\nimport { Container, Header, Left, Body, Title, Right, Button, Content, Icon, Text, Footer, Spinner } from 'native-base';\nimport HygoButton from \"../../components/v2/HygoButton\";\nimport { HygoCard } from \"../../components/v2/HygoCards\";\nimport { ModulationContext } from \"../../context/modulation.context\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport i18n from 'i18n-js';\nimport COLORS from \"../../colors\";\nimport hygoStyles from \"../../styles\";\nimport Metrics from \"../../components/pulverisation-detailed/Metrics\";\nimport HourScale from \"../../components/v2/HourScale\";\nimport ModulationBar from \"../../components/v2/ModulationBar\";\nimport { next12HoursData } from \"./staticData\";\nimport moment from 'moment';\nimport _ from 'lodash';\nimport { getMeteoDetailed_v2, getModulationValue_v2, getConditions_v2, getMetrics_v2 } from \"../../api/hygoApi\";\nvar PICTO_MAP = {\n  'SUN': require(\"../../../assets/sunny.png\"),\n  'CLOUD': require(\"../../../assets/cloudy.png\"),\n  'STORM': require(\"../../../assets/stormy.png\"),\n  'RAIN': require(\"../../../assets/rainy.png\"),\n  'SNOW': require(\"../../../assets/snowy.png\")\n};\n\nvar hasRacinaire = function hasRacinaire() {\n  return false;\n};\n\nvar SelectSlotScreen = function SelectSlotScreen(_ref) {\n  var navigation = _ref.navigation;\n  var context = React.useContext(ModulationContext);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentDay = _useState2[0],\n      setCurrentDay = _useState2[1];\n\n  var _useState3 = useState(COLORS.EXCELLENT),\n      _useState4 = _slicedToArray(_useState3, 2),\n      background = _useState4[0],\n      setBackground = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      meteoData = _useState6[0],\n      setMeteoData = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      conditions = _useState8[0],\n      setConditions = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      metrics = _useState10[0],\n      setMetrics = _useState10[1];\n\n  var _useState11 = useState(next12HoursData[0]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      currentNext12HoursData = _useState12[0],\n      setCurrentNextHoursData = _useState12[1];\n\n  var _useState13 = useState(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      loading = _useState14[0],\n      setLoading = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      isRefreshing = _useState16[0],\n      setIsRefreshing = _useState16[1];\n\n  var _useState17 = useState({}),\n      _useState18 = _slicedToArray(_useState17, 2),\n      detailed = _useState18[0],\n      setDetailed = _useState18[1];\n\n  var totalArea = context.selectedFields.reduce(function (r, f) {\n    return r + f.area;\n  }, 0);\n  var totalPhyto = totalArea * context.selectedProducts.reduce(function (r, p) {\n    return r + p.dose;\n  }, 0) / 10000;\n  var modAvg = context.mod.length > 0 ? context.mod.reduce(function (sum, m) {\n    return sum + m.mod;\n  }, 0) / context.mod.length : 0;\n  useEffect(function () {\n    setLoading(true);\n    loadMeteo();\n    loadConditions();\n  }, []);\n  useEffect(function () {\n    loadModulation();\n    loadMetrics();\n  }, [context.selectedSlot, currentDay]);\n  useEffect(function () {\n    loadMetrics();\n  }, [meteoData]);\n\n  var loadMeteo = function loadMeteo() {\n    var now, dt, data;\n    return _regeneratorRuntime.async(function loadMeteo$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            now = moment.utc('2020-05-05');\n\n            if (now.minutes() >= 30) {\n              now.hours(now.hours() + 1);\n            }\n\n            now = now.startOf('day');\n            dt = _toConsumableArray(Array(5).keys()).map(function (i) {\n              return now.add(i == 0 ? 0 : 1, 'day').format('YYYY-MM-DD');\n            });\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(Promise.all(dt.map(function (d) {\n              return getMeteoDetailed_v2(d);\n            })));\n\n          case 6:\n            data = _context.sent;\n            setMeteoData(data);\n            setLoading(false);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var loadMetrics = useCallback(function _callee() {\n    var mtr, minval, maxval, selected, chd, dir;\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(getMetrics_v2({\n              day: moment.utc('2020-05-05').add(currentDay, 'day').format('YYYY-MM-DD'),\n              fields: context.selectedFields\n            }));\n\n          case 2:\n            mtr = _context2.sent;\n\n            if (!(mtr.length <= 0)) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 5:\n            minval = -99999, maxval = 99999;\n            selected = context.selectedSlot;\n            chd = {}, dir = [];\n\n            _.forEach(mtr, function (v2, k2) {\n              var v = {};\n              var k = k2.toString().padStart(2, '0');\n              v['data'] = v2;\n              console.log(k);\n\n              if (parseInt(k) > selected.max || parseInt(k) < selected.min) {\n                return;\n              }\n\n              chd.wind = Math.max(chd.wind || minval, v.data.wind);\n              chd.gust = Math.max(chd.gust || minval, v.data.gust);\n              chd.precipitation = (chd.precipitation || 0) + v.data.precipitation;\n              chd.probabilityCnt = (chd.probabilityCnt || 0) + 1;\n              chd.probabilitySum = (chd.probabilitySum || 0) + parseFloat(v.data.probability);\n              chd.prevprecipitation = (chd.prevprecipitation || 0) + (parseInt(k) < selected.max ? v.data.precipitation : 0);\n              chd.mintemp = Math.min(chd.mintemp || maxval, v.data.mintemp);\n              chd.maxtemp = Math.max(chd.maxtemp || minval, v.data.maxtemp);\n              chd.minhumi = Math.min(chd.minhumi || maxval, v.data.minhumi);\n              chd.maxhumi = Math.max(chd.maxhumi || minval, v.data.maxhumi);\n              chd.minsoilhumi = Math.min(chd.minsoilhumi || maxval, v.data.soilhumi);\n              chd.maxsoilhumi = Math.max(chd.maxsoilhumi || minval, v.data.soilhumi);\n              dir.push(v.data.winddirection);\n            });\n\n            chd.winddirection = _.head(_(dir).countBy().entries().maxBy(_.last));\n            chd.probability = chd.probabilityCnt > 0 ? chd.probabilitySum / chd.probabilityCnt : 0.0;\n            setMetrics(chd);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [context.selectedSlot, meteoData, currentDay]);\n\n  var loadConditions = function loadConditions() {\n    var now, dt, data;\n    return _regeneratorRuntime.async(function loadConditions$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            now = moment.utc('2020-05-05');\n\n            if (now.minutes() >= 30) {\n              now.hours(now.hours() + 1);\n            }\n\n            now = now.startOf('day');\n            dt = _toConsumableArray(Array(5).keys()).map(function (i) {\n              return now.add(i == 0 ? 0 : 1, 'day').format('YYYY-MM-DD');\n            });\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(Promise.all(dt.map(function (day) {\n              return getConditions_v2({\n                day: day,\n                products: context.selectedProducts.map(function (p) {\n                  return p.id;\n                }),\n                parcelles: context.selectedFields.map(function (f) {\n                  return f.id;\n                })\n              });\n            })));\n\n          case 6:\n            data = _context3.sent;\n            setConditions(data);\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var loadModulation = function loadModulation() {\n    var products, cultures, now, hour, data, newMod;\n    return _regeneratorRuntime.async(function loadModulation$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            setIsRefreshing(true);\n            products = context.selectedProducts.map(function (p) {\n              return p.phytoproduct.id;\n            });\n            cultures = context.selectedFields.map(function (f) {\n              return f.culture.id;\n            });\n            now = moment.utc('2020-05-05');\n            hour = context.selectedSlot.min.toString().padStart(2, '0');\n            data = {\n              hour: hour,\n              day: now.add(currentDay, 'day').format('YYYY-MM-DD'),\n              cultures: cultures,\n              products: products,\n              selected: {\n                min: 0,\n                max: context.selectedSlot.max - context.selectedSlot.min\n              }\n            };\n            _context4.next = 8;\n            return _regeneratorRuntime.awrap(getModulationValue_v2(data));\n\n          case 8:\n            newMod = _context4.sent;\n            context.setMod(newMod);\n            setIsRefreshing(false);\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: styles.statusbar,\n    forceInset: {\n      top: 'always'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, React.createElement(StatusBar, {\n    translucent: true,\n    backgroundColor: \"transparent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }), React.createElement(Container, {\n    contentContainerStyle: [styles.container, StyleSheet.absoluteFill],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }, React.createElement(Header, {\n    style: styles.header,\n    androidStatusBarColor: COLORS.CYAN,\n    iosBarStyle: \"light-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 17\n    }\n  }, React.createElement(Left, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 21\n    }\n  }, React.createElement(Button, {\n    transparent: true,\n    onPress: function onPress() {\n      return navigation.goBack();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 25\n    }\n  }, React.createElement(Icon, {\n    type: \"AntDesign\",\n    name: \"arrowleft\",\n    style: {\n      color: '#fff'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 29\n    }\n  }))), React.createElement(Body, {\n    style: styles.headerBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 21\n    }\n  }, React.createElement(Title, {\n    style: styles.headerTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 25\n    }\n  }, \"Pulv\\xE9risation\"), React.createElement(Title, {\n    style: styles.headerTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 25\n    }\n  }, \"Choix du cr\\xE9neau\")), React.createElement(Right, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 21\n    }\n  })), React.createElement(Content, {\n    style: styles.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }\n  }, loading ? React.createElement(Spinner, {\n    size: 16,\n    color: COLORS.CYAN,\n    style: {\n      height: 48,\n      marginTop: 48\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 25\n    }\n  }) : React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 29\n    }\n  }, React.createElement(View, {\n    style: styles.tabBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 33\n    }\n  }, meteoData.map(function (d, i) {\n    var dayName = i18n.t(\"days.\" + d.day.toLowerCase()).toUpperCase().slice(0, 3);\n    return React.createElement(TouchableOpacity, {\n      key: i,\n      style: [styles.tabHeading, {\n        backgroundColor: currentDay == i ? '#fff' : COLORS.DARK_BLUE\n      }],\n      onPress: function onPress() {\n        setCurrentDay(i);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 45\n      }\n    }, React.createElement(Text, {\n      style: [styles.tabText, {\n        color: currentDay == i ? COLORS.DARK_BLUE : '#fff'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 49\n      }\n    }, dayName));\n  })), React.createElement(View, {\n    style: styles.dayContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 33\n    }\n  }, React.createElement(View, {\n    style: styles.hour4Weather,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 37\n    }\n  }, meteoData[currentDay].meteoBy4Hour.map(function (m, i) {\n    return React.createElement(View, {\n      key: i,\n      style: styles.hour4WeatherContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 49\n      }\n    }, React.createElement(Text, {\n      style: styles.hour4WeatherText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 53\n      }\n    }, m.hour + \"h\"), React.createElement(Image, {\n      style: styles.hour4WeatherImage,\n      source: PICTO_MAP[m.pictocode],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 53\n      }\n    }));\n  }))), React.createElement(View, {\n    style: {\n      backgroundColor: COLORS.DARK_BLUE\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 33\n    }\n  }, React.createElement(Title, {\n    style: styles.hourTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 37\n    }\n  }, context.selectedSlot.min, \"h - \", context.selectedSlot.max + 1, \"h\"), React.createElement(View, {\n    style: {\n      paddingBottom: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 37\n    }\n  }, React.createElement(Metrics, {\n    currentHourMetrics: metrics,\n    hasRacinaire: hasRacinaire(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 41\n    }\n  })), React.createElement(View, {\n    style: styles.sliderContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 37\n    }\n  }, React.createElement(ModulationBar, {\n    from: 0,\n    initialMax: context.selectedSlot.max,\n    initialMin: context.selectedSlot.min,\n    data: conditions[currentDay],\n    width: Dimensions.get('window').width - 30,\n    onHourChangeEnd: function onHourChangeEnd(selected) {\n      return context.setSelectedSlot(selected);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 41\n    }\n  })), React.createElement(HourScale, {\n    hour: '00',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 37\n    }\n  })), React.createElement(View, {\n    style: {\n      paddingTop: 20,\n      paddingBottom: 40\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 33\n    }\n  }, React.createElement(HygoCard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 37\n    }\n  }, isRefreshing ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 57\n    }\n  }) : React.createElement(View, {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 45\n    }\n  }, React.createElement(Text, {\n    style: [hygoStyles.h0, {\n      padding: 0,\n      paddingBottom: 0,\n      fontSize: 16\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 49\n    }\n  }, \"Total \\xE9conomis\\xE9\"), React.createElement(Text, {\n    style: [hygoStyles.h0, {\n      padding: 0,\n      paddingBottom: 0,\n      fontSize: 24\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 49\n    }\n  }, (totalPhyto * modAvg / 100).toFixed(1) + \"L (\" + modAvg.toFixed(0) + \"%)\")))))), !loading && React.createElement(Footer, {\n    style: styles.footer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 21\n    }\n  }, React.createElement(HygoButton, {\n    label: \"AFFICHER LE R\\xC9CAPITULATIF\",\n    onPress: function onPress() {\n      context.setMetrics(metrics);\n      navigation.navigate('TestPageReport');\n    },\n    icon: {\n      type: 'AntDesign',\n      name: 'arrowright',\n      fontSize: 26\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 25\n    }\n  }))));\n};\n\nvar styles = StyleSheet.create({\n  statusbar: {\n    flex: 1,\n    display: 'flex',\n    backgroundColor: Platform.OS === 'ios' ? 'black' : COLORS.CYAN\n  },\n  container: {\n    backgroundColor: COLORS.BEIGE,\n    flexDirection: \"column\",\n    display: 'flex'\n  },\n  header: {\n    backgroundColor: COLORS.CYAN\n  },\n  headerBody: {\n    flex: 4,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  headerTitle: {\n    color: '#fff',\n    fontFamily: 'nunito-regular',\n    fontSize: 24\n  },\n  title: {\n    paddingTop: 20,\n    paddingLeft: 10,\n    textTransform: 'uppercase',\n    fontFamily: 'nunito-bold',\n    fontSize: 16,\n    color: COLORS.CYAN\n  },\n  content: {\n    backgroundColor: COLORS.BEIGE\n  },\n  footer: {\n    backgroundColor: COLORS.BEIGE\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22,\n    backgroundColor: \"black\",\n    opacity: 0.7\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  tabBar: {\n    display: 'flex',\n    flexDirection: 'row'\n  },\n  tabHeading: {\n    padding: 15,\n    width: Dimensions.get('window').width / 5 - 4,\n    backgroundColor: COLORS.DARK_BLUE,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderTopRightRadius: 20,\n    marginHorizontal: 2\n  },\n  tabText: {\n    fontFamily: 'nunito-heavy',\n    fontSize: 14,\n    color: '#fff'\n  },\n  dayContent: {\n    backgroundColor: '#fff',\n    paddingHorizontal: 15,\n    paddingTop: 20,\n    shadowColor: '#000',\n    elevation: 3,\n    shadowOpacity: .2,\n    shadowOffset: {\n      width: 0,\n      height: 3\n    },\n    shadowRadius: 3\n  },\n  weatherContainer: {\n    padding: 8,\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: COLORS.BEIGE,\n    marginTop: 5,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  weatherImage: {\n    width: 24,\n    height: 24,\n    tintColor: COLORS.DARK_BLUE\n  },\n  hour4Weather: {\n    paddingHorizontal: 8,\n    paddingVertical: 10,\n    paddingBottom: 20,\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-evenly'\n  },\n  hour4WeatherContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  hour4WeatherText: {\n    fontSize: 14,\n    fontFamily: 'nunito-regular',\n    color: '#aaa'\n  },\n  hour4WeatherImage: {\n    marginTop: 5,\n    width: 24,\n    height: 24,\n    resizeMode: 'cover',\n    tintColor: COLORS.DARK_BLUE\n  },\n  sliderContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  hourTitle: {\n    color: '#FFF',\n    textTransform: 'uppercase',\n    fontFamily: 'nunito-bold',\n    fontSize: 26,\n    paddingTop: 20\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, props) {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectSlotScreen);","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/screens/testScreens/SelectSlotScreen.tsx"],"names":["React","useEffect","useState","useCallback","SafeAreaView","connect","Container","Header","Left","Body","Title","Right","Button","Content","Icon","Text","Footer","Spinner","HygoButton","HygoCard","ModulationContext","TouchableOpacity","i18n","COLORS","hygoStyles","Metrics","HourScale","ModulationBar","next12HoursData","moment","_","getMeteoDetailed_v2","getModulationValue_v2","getConditions_v2","getMetrics_v2","PICTO_MAP","require","hasRacinaire","SelectSlotScreen","navigation","context","useContext","currentDay","setCurrentDay","EXCELLENT","background","setBackground","meteoData","setMeteoData","conditions","setConditions","metrics","setMetrics","currentNext12HoursData","setCurrentNextHoursData","loading","setLoading","isRefreshing","setIsRefreshing","detailed","setDetailed","totalArea","selectedFields","reduce","r","f","area","totalPhyto","selectedProducts","p","dose","modAvg","mod","length","sum","m","loadMeteo","loadConditions","loadModulation","loadMetrics","selectedSlot","now","utc","minutes","hours","startOf","dt","Array","keys","map","i","add","format","Promise","all","d","data","day","fields","mtr","minval","maxval","selected","chd","dir","forEach","v2","k2","v","k","toString","padStart","console","log","parseInt","max","min","wind","Math","gust","precipitation","probabilityCnt","probabilitySum","parseFloat","probability","prevprecipitation","mintemp","maxtemp","minhumi","maxhumi","minsoilhumi","soilhumi","maxsoilhumi","push","winddirection","head","countBy","entries","maxBy","last","products","id","parcelles","phytoproduct","cultures","culture","hour","newMod","setMod","styles","statusbar","top","container","StyleSheet","absoluteFill","header","CYAN","flex","goBack","color","headerBody","headerTitle","content","height","marginTop","tabBar","dayName","t","toLowerCase","toUpperCase","slice","tabHeading","backgroundColor","DARK_BLUE","tabText","dayContent","hour4Weather","meteoBy4Hour","hour4WeatherContainer","hour4WeatherText","hour4WeatherImage","pictocode","hourTitle","paddingBottom","sliderContainer","Dimensions","get","width","setSelectedSlot","paddingTop","display","justifyContent","flexDirection","alignItems","h0","padding","fontSize","toFixed","footer","navigate","type","name","create","Platform","OS","BEIGE","fontFamily","title","paddingLeft","textTransform","centeredView","opacity","modalView","margin","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","borderTopRightRadius","marginHorizontal","paddingHorizontal","weatherContainer","weatherImage","tintColor","paddingVertical","resizeMode","mapStateToProps","state","mapDispatchToProps","dispatch","props"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { SafeAreaView } from 'react-navigation';\nimport { StyleSheet, RefreshControl, StatusBar, View, Platform, Image, Dimensions } from 'react-native';\nimport { connect } from 'react-redux';\nimport { Container, Header, Left, Body, Title, Right, Button, Content, Icon, Text, Footer, Spinner } from 'native-base';\nimport { ProductList } from './ProductList';\nimport HygoButton from '../../components/v2/HygoButton';\nimport { HygoCard } from '../../components/v2/HygoCards';\nimport { getInterventions } from '../../api/hygoApi';\nimport { ModulationContext } from '../../context/modulation.context';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport i18n from 'i18n-js';\nimport COLORS from '../../colors';\nimport hygoStyles from '../../styles'\nimport Metrics from '../../components/pulverisation-detailed/Metrics';\nimport HourScale from '../../components/v2/HourScale';\nimport ExtraMetrics from '../../components/pulverisation-detailed/ExtraMetrics';\nimport Modulation from '../../components/pulverisation-detailed/Modulation';\nimport ModulationBar from '../../components/v2/ModulationBar';\nimport { hourMetricsData, daysData, next12HoursData, modData } from './staticData';\nimport moment from 'moment';\nimport _ from 'lodash';\n\nimport { getMeteoDetailed_v2, getModulationValue_v2, getConditions_v2, getMetrics_v2 } from '../../api/hygoApi';\nimport { meteoByHourType, meteoDataType } from '../../types/meteo.types';\nimport { activeProductType } from '../../types/activeproduct.types';\nimport { fieldType } from '../../types/field.types';\nimport { modulationType } from '../../types/modulation.types';\nimport { conditionType } from '../../types/condition.types';\n\ntype dailyConditionType = Array<conditionType>\ntype currentMetricsType = {\n    wind?: any,\n    gust?: any\n    precipitation?: any,\n    probabilityCnt?: any,\n    probabilitySum?: any,\n    prevprecipitation?: any,\n    mintemp?: any,\n    maxtemp?: any,\n    minhumi?: any,\n    maxhumi?: any,\n    minsoilhumi?: any,\n    maxsoilhumi?: any,\n    r2?: any,\n    r3?: any,\n    r6?: any,\n    deltatemp?: any,\n    t3?: any,\n    winddirection?: any,\n    probability?: any\n}\n\nconst PICTO_MAP = {\n    'SUN': require('../../../assets/sunny.png'),\n    'CLOUD': require('../../../assets/cloudy.png'),\n    'STORM': require('../../../assets/stormy.png'),\n    'RAIN': require('../../../assets/rainy.png'),\n    'SNOW': require('../../../assets/snowy.png'),\n}\n\nconst hasRacinaire = () => false\nconst SelectSlotScreen = ({ navigation }) => {\n    const context = React.useContext(ModulationContext)\n\n    const [currentDay, setCurrentDay] = useState<number>(0)\n    const [background, setBackground] = useState<any>(COLORS.EXCELLENT)\n    const [meteoData, setMeteoData] = useState<Array<meteoDataType>>([])\n    const [conditions, setConditions] = useState<Array<dailyConditionType>>([])\n    const [metrics, setMetrics] = useState<any>()//hourMetricsData[0])\n    const [currentNext12HoursData, setCurrentNextHoursData] = useState<any>(next12HoursData[0])\n\n    const [loading, setLoading] = useState(true)\n    const [isRefreshing, setIsRefreshing] = useState(false)\n    const [detailed, setDetailed] = useState({})\n\n    const totalArea = context.selectedFields.reduce((r, f) => r + f.area, 0)        //in meters^2\n    const totalPhyto = totalArea * context.selectedProducts.reduce((r, p) => r + p.dose, 0) / 10000\n    const modAvg = context.mod.length > 0 ? context.mod.reduce((sum, m) => sum + m.mod, 0) / context.mod.length : 0\n\n    // Loading meteo : every hour and 4hours merged for the next 5 days \n    useEffect(() => {\n        setLoading(true)\n        loadMeteo()\n        loadConditions()\n    }, [])\n\n    //Updating modulation when selected slot change or day change\n    useEffect(() => {\n        loadModulation()\n        loadMetrics()\n    }, [context.selectedSlot, currentDay])\n\n    useEffect(() => {\n        loadMetrics()\n    }, [meteoData])\n\n    const loadMeteo = async () => {\n        let now = moment.utc('2020-05-05')\n        if (now.minutes() >= 30) {\n            now.hours(now.hours() + 1)\n        }\n        now = now.startOf('day')\n        // array of the 5 next days to iterate on\n        const dt = [...Array(5).keys()].map((i) => now.add(i == 0 ? 0 : 1, 'day').format('YYYY-MM-DD'))\n        const data: Array<meteoDataType> = await Promise.all(dt.map((d) => getMeteoDetailed_v2(d)))\n        setMeteoData(data)\n        setLoading(false)\n    }\n\n    const loadMetrics = useCallback(async () => {\n\n        const mtr = await getMetrics_v2({\n            day: moment.utc('2020-05-05').add(currentDay, 'day').format('YYYY-MM-DD'),\n            fields: context.selectedFields\n        })\n        if (mtr.length <= 0){\n            return\n        }\n\n        const minval = -99999, maxval = 99999\n        const selected = context.selectedSlot\n        let chd:currentMetricsType = {}, dir = []\n        _.forEach(mtr, (v2, k2) => {\n            const v = {}\n            const k = k2.toString().padStart(2,'0')\n            v['data'] = v2\n            console.log(k)\n            if (parseInt(k) > selected.max || parseInt(k) < selected.min) {\n                return\n            }\n            chd.wind = Math.max((chd.wind || minval), v.data.wind)\n            chd.gust = Math.max((chd.gust || minval), v.data.gust)\n\n            chd.precipitation = (chd.precipitation || 0) + v.data.precipitation\n            chd.probabilityCnt = (chd.probabilityCnt || 0) + 1\n            chd.probabilitySum = (chd.probabilitySum || 0) + parseFloat(v.data.probability)\n\n            chd.prevprecipitation = (chd.prevprecipitation || 0) + (parseInt(k) < selected.max ? v.data.precipitation : 0)\n\n            chd.mintemp = Math.min((chd.mintemp || maxval), v.data.mintemp)\n            chd.maxtemp = Math.max((chd.maxtemp || minval), v.data.maxtemp)\n\n            chd.minhumi = Math.min((chd.minhumi || maxval), v.data.minhumi)\n            chd.maxhumi = Math.max((chd.maxhumi || minval), v.data.maxhumi)\n\n            chd.minsoilhumi = Math.min((chd.minsoilhumi || maxval), v.data.soilhumi)\n            chd.maxsoilhumi = Math.max((chd.maxsoilhumi || minval), v.data.soilhumi)\n\n            dir.push(v.data.winddirection)\n\n            // _.forOwn(v.parcelle, (v0, k0) => {\n            //     if (parseInt(k) === selected.max) {\n            //         chd.r2 = Math.max((chd.r2 || minval), v0.r2)\n            //         chd.r3 = Math.max((chd.r3 || minval), v0.r3)\n            //         chd.r6 = Math.max((chd.r6 || minval), v0.r6)\n            //     }\n\n            //     chd.deltatemp = Math.max((chd.deltatemp || minval), v0.deltatemp)\n            //     chd.t3 = Math.min((chd.t3 || maxval), v0.t3)\n            // })\n        })\n\n        chd.winddirection = _.head(_(dir).countBy().entries().maxBy(_.last));\n\n        chd.probability = chd.probabilityCnt > 0 ? chd.probabilitySum / chd.probabilityCnt : 0.0\n\n        setMetrics(chd)\n    }, [context.selectedSlot, meteoData, currentDay])\n\n    const loadConditions = async () => {\n        let now = moment.utc('2020-05-05')\n        if (now.minutes() >= 30) {\n            now.hours(now.hours() + 1)\n        }\n        now = now.startOf('day')\n        // array of the 5 next days to iterate on\n        const dt = [...Array(5).keys()].map((i) => now.add(i == 0 ? 0 : 1, 'day').format('YYYY-MM-DD'))\n        const data: Array<dailyConditionType> = await Promise.all(\n            dt.map((day) => (\n                getConditions_v2({\n                    day,\n                    products: context.selectedProducts.map((p) => p.id),\n                    parcelles: context.selectedFields.map((f) => f.id)\n                })))\n        )\n        setConditions(data)\n    }\n\n    const loadModulation = async () => {\n        setIsRefreshing(true)\n        const products: Array<number> = context.selectedProducts.map((p: activeProductType) => p.phytoproduct.id)\n        const cultures: Array<number> = context.selectedFields.map((f: fieldType) => f.culture.id)\n        const now = moment.utc('2020-05-05')\n        const hour = context.selectedSlot.min.toString().padStart(2, '0')\n        const data = {\n            hour,\n            day: now.add(currentDay, 'day').format('YYYY-MM-DD'),\n            cultures,\n            products,\n            selected: {\n                min: 0,\n                max: context.selectedSlot.max - context.selectedSlot.min\n            }\n        }\n        const newMod: Array<modulationType> = await getModulationValue_v2(data)\n        context.setMod(newMod)\n        setIsRefreshing(false)\n    }\n\n    return (\n        <SafeAreaView style={styles.statusbar} forceInset={{ top: 'always' }}>\n            <StatusBar translucent backgroundColor=\"transparent\" />\n            <Container contentContainerStyle={[styles.container, StyleSheet.absoluteFill]}>\n                <Header style={styles.header} androidStatusBarColor={COLORS.CYAN} iosBarStyle=\"light-content\">\n                    <Left style={{ flex: 1 }}>\n                        <Button transparent onPress={() => navigation.goBack()}>\n                            <Icon type='AntDesign' name='arrowleft' style={{ color: '#fff' }} />\n                        </Button>\n                    </Left>\n                    <Body style={styles.headerBody}>\n                        <Title style={styles.headerTitle}>Pulvérisation</Title>\n                        <Title style={styles.headerTitle}>Choix du créneau</Title>\n                    </Body>\n                    <Right style={{ flex: 1 }}></Right>\n                </Header>\n                <Content style={styles.content}>\n                    {loading ? (\n                        <Spinner size={16} color={COLORS.CYAN} style={{ height: 48, marginTop: 48 }} />\n                    )\n                        : (\n                            <View>\n                                {/*============= Week Tab =================*/}\n                                <View style={styles.tabBar}>\n                                    {meteoData.map((d, i) => {\n                                        const dayName = i18n.t(`days.${d.day.toLowerCase()}`).toUpperCase().slice(0, 3)\n                                        return (\n                                            <TouchableOpacity\n                                                key={i}\n                                                style={[styles.tabHeading, { backgroundColor: currentDay == i ? '#fff' : COLORS.DARK_BLUE }]}\n                                                onPress={() => { setCurrentDay(i) }}\n                                            >\n                                                <Text style={[styles.tabText, { color: currentDay == i ? COLORS.DARK_BLUE : '#fff' }]}>{dayName}</Text>\n                                                {/* <View style={styles.weatherContainer}>\n                                        <Image source={PICTO_MAP[d.pictoDay]} style={styles.weatherImage} />\n                                    </View> */}\n                                            </TouchableOpacity>\n                                        )\n                                    })}\n                                </View>\n                                {/*=============== Day Weather ==============*/}\n                                <View style={styles.dayContent}>\n                                    <View style={styles.hour4Weather}>\n                                        {meteoData[currentDay].meteoBy4Hour.map((m, i) => {\n                                            return (\n                                                <View key={i} style={styles.hour4WeatherContainer}>\n                                                    <Text style={styles.hour4WeatherText}>{`${m.hour}h`}</Text>\n                                                    <Image style={styles.hour4WeatherImage} source={PICTO_MAP[m.pictocode]} />\n                                                </View>\n                                            )\n                                        })}\n                                    </View>\n                                </View>\n                                {/*=============== Slot Picker ===============*/}\n                                <View style={{ backgroundColor: COLORS.DARK_BLUE }}>\n                                    <Title style={styles.hourTitle}>{context.selectedSlot.min}h - {context.selectedSlot.max + 1}h</Title>\n                                    <View style={{ paddingBottom: 20 }}>\n                                        <Metrics currentHourMetrics={metrics} hasRacinaire={hasRacinaire()} />\n                                    </View>\n\n                                    <View style={styles.sliderContainer}>\n                                        {/*<HygoParcelleIntervention/>*/}\n                                        <ModulationBar\n                                            from={0/*parseInt(hour)*/}\n                                            initialMax={context.selectedSlot.max}\n                                            initialMin={context.selectedSlot.min}\n                                            data={conditions[currentDay]}\n                                            width={Dimensions.get('window').width - 30}\n                                            onHourChangeEnd={(selected) => context.setSelectedSlot(selected) }\n                                        />\n                                    </View>\n\n                                    <HourScale hour={'00'/*hour*/} />\n\n                                    {/* <ExtraMetrics currentHourMetrics={currentHourMetrics} /> */}\n                                </View>\n\n                                {/*================= Result ==================*/}\n                                {/* <Modulation day={day} hour={hour} selected={context.selected} modulationChanged={modulationChanged} setModulationChanged={setModulationChanged} /> */}\n                                <View style={{ paddingTop: 20, paddingBottom: 40 }}>\n                                    <HygoCard>\n                                        {isRefreshing ? <Spinner /> : (\n                                            <View style={{ display: 'flex', justifyContent: 'space-between', flexDirection: 'row', alignItems: 'center' }}>\n                                                <Text style={[hygoStyles.h0, { padding: 0, paddingBottom: 0, fontSize: 16, }]}>Total économisé</Text>\n                                                <Text style={[hygoStyles.h0, { padding: 0, paddingBottom: 0, fontSize: 24 }]}>\n                                                    {`${(totalPhyto * modAvg / 100).toFixed(1)}L (${modAvg.toFixed(0)}%)`}\n                                                </Text>\n                                            </View>\n                                        )}\n                                    </HygoCard>\n                                </View>\n                            </View>\n                        )}\n                </Content>\n                {!loading && (\n                    <Footer style={styles.footer}>\n                        <HygoButton\n                            label=\"AFFICHER LE RÉCAPITULATIF\"\n                            onPress={() => {\n                                context.setMetrics(metrics)\n                                navigation.navigate('TestPageReport')\n                            }\n                            }\n                            icon={{\n                                type: 'AntDesign',\n                                name: 'arrowright',\n                                fontSize: 26,\n                            }} />\n                    </Footer>\n                )}\n            </Container>\n        </SafeAreaView>\n    )\n}\n\n\nconst styles = StyleSheet.create({\n    statusbar: {\n        flex: 1,\n        display: 'flex',\n        backgroundColor: Platform.OS === 'ios' ? 'black' : COLORS.CYAN,\n    },\n    container: {\n        backgroundColor: COLORS.BEIGE,\n        flexDirection: \"column\",\n        display: 'flex',\n    },\n    header: {\n        backgroundColor: COLORS.CYAN\n    },\n    headerBody: {\n        flex: 4,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    headerTitle: {\n        color: '#fff',\n        fontFamily: 'nunito-regular',\n        fontSize: 24\n    },\n    title: {\n        paddingTop: 20,\n        paddingLeft: 10,\n        textTransform: 'uppercase',\n        fontFamily: 'nunito-bold',\n        fontSize: 16,\n        color: COLORS.CYAN\n    },\n    content: {\n        backgroundColor: COLORS.BEIGE\n    },\n    footer: {\n        backgroundColor: COLORS.BEIGE\n    },\n    centeredView: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        marginTop: 22,\n        backgroundColor: \"black\",\n        opacity: 0.7\n    },\n    modalView: {\n        margin: 20,\n        backgroundColor: \"white\",\n        borderRadius: 20,\n        padding: 35,\n        alignItems: \"center\",\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 2\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 3.84,\n        elevation: 5,\n    },\n    tabBar: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    tabHeading: {\n        padding: 15,\n        width: Dimensions.get('window').width / 5 - 4,\n        backgroundColor: COLORS.DARK_BLUE,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderTopRightRadius: 20,\n        marginHorizontal: 2,\n    },\n    tabText: {\n        fontFamily: 'nunito-heavy',\n        fontSize: 14,\n        color: '#fff',\n    },\n    dayContent: {\n        backgroundColor: '#fff',\n        paddingHorizontal: 15,\n        paddingTop: 20,\n        shadowColor: '#000',\n        elevation: 3,\n        shadowOpacity: .2,\n        shadowOffset: {\n            width: 0,\n            height: 3,\n        },\n        shadowRadius: 3,\n    },\n    weatherContainer: {\n        padding: 8,\n        width: 40,\n        height: 40,\n        borderRadius: 20,\n        backgroundColor: COLORS.BEIGE,\n        marginTop: 5,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    weatherImage: {\n        width: 24,\n        height: 24,\n        tintColor: COLORS.DARK_BLUE\n    },\n    hour4Weather: {\n        paddingHorizontal: 8,\n        paddingVertical: 10,\n        paddingBottom: 20,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-evenly',\n    },\n    hour4WeatherContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    hour4WeatherText: {\n        fontSize: 14,\n        fontFamily: 'nunito-regular',\n        color: '#aaa',\n    },\n    hour4WeatherImage: {\n        marginTop: 5,\n        width: 24,\n        height: 24,\n        resizeMode: 'cover',\n        tintColor: COLORS.DARK_BLUE,\n    },\n    sliderContainer: {\n        //marginTop: 40,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    hourTitle: {\n        color: '#FFF',\n        textTransform: 'uppercase',\n        fontFamily: 'nunito-bold',\n        fontSize: 26,\n        paddingTop: 20\n    }\n});\n\nconst mapStateToProps = (state) => ({\n\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectSlotScreen);"]},"metadata":{},"sourceType":"module"}