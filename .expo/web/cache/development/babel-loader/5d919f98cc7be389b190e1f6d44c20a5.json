{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/context/modulation.context.tsx\";\nimport React, { useState } from 'react';\nexport var ModulationContext = React.createContext({});\nexport var ModulationProvider = function ModulationProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedFields = _useState2[0],\n      setSelectedFields = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedProducts = _useState4[0],\n      setSelectedProducts = _useState4[1];\n\n  var _useState5 = useState(100),\n      _useState6 = _slicedToArray(_useState5, 2),\n      debit = _useState6[0],\n      setDebit = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      buses = _useState8[0],\n      setBuses = _useState8[1];\n\n  var _useState9 = useState({\n    min: 9,\n    max: 12\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      selectedSlot = _useState10[0],\n      setSelectedSlot = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      mod = _useState12[0],\n      setMod = _useState12[1];\n\n  var _useState13 = useState(),\n      _useState14 = _slicedToArray(_useState13, 2),\n      metrics = _useState14[0],\n      setMetrics = _useState14[1];\n\n  var addField = function addField(field) {\n    setSelectedFields([].concat(_toConsumableArray(selectedFields), [field]));\n  };\n\n  var removeField = function removeField(id) {\n    setSelectedFields(_toConsumableArray(selectedFields.filter(function (f) {\n      return f.id != id;\n    })));\n  };\n\n  var cleanFields = function cleanFields() {\n    setSelectedFields([]);\n  };\n\n  var addProduct = function addProduct(prod) {\n    setSelectedProducts([].concat(_toConsumableArray(selectedProducts), [prod]));\n  };\n\n  var removeProduct = function removeProduct(id) {\n    setSelectedProducts(_toConsumableArray(selectedProducts.filter(function (p) {\n      return p.id != id;\n    })));\n  };\n\n  var cleanProducts = function cleanProducts() {\n    setSelectedProducts([]);\n  };\n\n  return React.createElement(ModulationContext.Provider, {\n    value: {\n      selectedFields: selectedFields,\n      addField: addField,\n      removeField: removeField,\n      cleanFields: cleanFields,\n      setSelectedFields: setSelectedFields,\n      selectedProducts: selectedProducts,\n      addProduct: addProduct,\n      removeProduct: removeProduct,\n      cleanProducts: cleanProducts,\n      setSelectedProducts: setSelectedProducts,\n      debit: debit,\n      setDebit: setDebit,\n      buses: buses,\n      setBuses: setBuses,\n      selectedSlot: selectedSlot,\n      setSelectedSlot: setSelectedSlot,\n      mod: mod,\n      setMod: setMod,\n      metrics: metrics,\n      setMetrics: setMetrics\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/context/modulation.context.tsx"],"names":["React","useState","ModulationContext","createContext","ModulationProvider","children","selectedFields","setSelectedFields","selectedProducts","setSelectedProducts","debit","setDebit","buses","setBuses","min","max","selectedSlot","setSelectedSlot","mod","setMod","metrics","setMetrics","addField","field","removeField","id","filter","f","cleanFields","addProduct","prod","removeProduct","p","cleanProducts"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, Text, StyleProp, ViewStyle, TextStyle } from 'react-native';\nimport COLORS from '../colors'\nimport { activeProductType } from '../types/activeproduct.types';\nimport { fieldType } from '../types/field.types';\nimport { modulationType } from '../types/modulation.types';\n\nexport interface ModulationContextProps {\n    selectedFields?: Array<fieldType>,\n    addField?: any,\n    removeField?: any,\n    cleanFields?: any,\n    setSelectedFields?: any,\n\n    selectedProducts?: Array<activeProductType>,\n    addProduct?: any,\n    removeProduct?: any,\n    cleanProducts?: any,\n    setSelectedProducts?: any\n\n    debit?: number,\n    setDebit?: any,\n    buses? :string,\n    setBuses? : any,\n\n    selectedSlot?: selectedSlotType,\n    setSelectedSlot?: any,\n    mod?: Array<modulationType>,\n    setMod?: any,\n    metrics?: metricsType,\n    setMetrics? : any\n}\n// export type selectedFieldType = {\n//     type: string,\n//     name: string,\n//     area: number,\n//     selected: boolean,\n//     id: number\n// }\n// export type selectedProductType = {\n//     type: string,\n//     name: string,\n//     dose: number,\n//     selected?: boolean,\n//     id: number\n// }\nexport type selectedSlotType = {\n    min: number,\n    max: number\n}\nexport type metricsType ={\n    winddirection: string,\n    wind: number,\n    gust: number,\n    precipitation: number,\n    probability: number,\n    mintemp: number,\n    maxtemp: number,\n    minhumi: number,\n    maxhumi: number,\n    minsoilhumi: number,\n    maxsoilhumi: number,\n}\n\nexport const ModulationContext = React.createContext<ModulationContextProps>({});\n\nexport const ModulationProvider: React.FunctionComponent = ({ children }) => {\n\n    const [selectedFields, setSelectedFields] = useState<Array<fieldType>>([])\n    const [selectedProducts, setSelectedProducts] = useState<Array<activeProductType>>([])\n    const [debit, setDebit] = useState<number>(100)\n    const [buses, setBuses] = useState<string>()\n    const [selectedSlot, setSelectedSlot] = useState<selectedSlotType>({min:9, max:12})\n    const [mod, setMod] = useState<Array<modulationType>>([])\n    const [metrics, setMetrics] = useState<metricsType>()\n\n    const addField = (field: fieldType) => {\n        setSelectedFields([...selectedFields, field])\n    }\n    const removeField = (id: number) => {\n        setSelectedFields([...selectedFields.filter((f) => f.id != id)])\n    }\n    const cleanFields = () => { setSelectedFields([]) }\n\n    const addProduct = (prod: activeProductType) => {\n        setSelectedProducts([...selectedProducts, prod])\n    }\n    const removeProduct = (id: number) => {\n        setSelectedProducts([...selectedProducts.filter((p) => p.id != id)])\n    }\n    const cleanProducts = () => { setSelectedProducts([]) }\n\n    return (\n        <ModulationContext.Provider value={{ \n            selectedFields, addField, removeField, cleanFields, setSelectedFields,\n            selectedProducts, addProduct, removeProduct, cleanProducts, setSelectedProducts,\n            debit, setDebit, buses, setBuses,\n            selectedSlot, setSelectedSlot, mod, setMod, metrics, setMetrics,\n        }}>\n            {children}\n        </ModulationContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}