{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/screens/NextPulverisationDetailsTop.js\";\nimport React, { useEffect, useState } from 'react';\nimport NextPulverisationDetails from \"./NextPulverisationDetails\";\nimport { PADDED } from \"../constants\";\nimport { Amplitude, AMPLITUDE_EVENTS } from \"../amplitude\";\nvar ampEvent = AMPLITUDE_EVENTS.PulvDetailsScreen;\n\nvar NextPulverisationDetailsTop = function NextPulverisationDetailsTop(_ref) {\n  var navigation = _ref.navigation;\n  var result = navigation.getParam('data');\n  var day = navigation.getParam('day');\n  var hour = navigation.getParam('hour');\n  var ra = navigation.getParam('r');\n  useEffect(function () {\n    Amplitude.logEventWithProperties(ampEvent.render, {\n      timestamp: Date.now()\n    });\n  }, []);\n\n  var getNext12HoursData = function getNext12HoursData() {\n    var start = parseInt(hour),\n        output = {};\n\n    for (var i = start; i < start + 12; i++) {\n      var h = i % 24,\n          r = parseInt(i / 24);\n      var d = day;\n\n      if (r > 0) {\n        d = result.days[result.days.indexOf(day) + r];\n      }\n\n      output[PADDED[i]] = result.data[d].hours1[PADDED[h]];\n    }\n\n    output.ready = true;\n    return output;\n  };\n\n  var _useState = useState(getNext12HoursData()),\n      _useState2 = _slicedToArray(_useState, 1),\n      next12HoursData = _useState2[0];\n\n  return React.createElement(NextPulverisationDetails, {\n    navigation: navigation,\n    next12HoursData: next12HoursData,\n    result: result,\n    ra: ra,\n    day: day,\n    hour: hour,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default NextPulverisationDetailsTop;","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/screens/NextPulverisationDetailsTop.js"],"names":["React","useEffect","useState","NextPulverisationDetails","PADDED","Amplitude","AMPLITUDE_EVENTS","ampEvent","PulvDetailsScreen","NextPulverisationDetailsTop","navigation","result","getParam","day","hour","ra","logEventWithProperties","render","timestamp","Date","now","getNext12HoursData","start","parseInt","output","i","h","r","d","days","indexOf","data","hours1","ready","next12HoursData"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,wBAAP;AAEA,SAASC,MAAT;AAEA,SAAQC,SAAR,EAAmBC,gBAAnB;IAC0BC,Q,GAAYD,gB,CAA/BE,iB;;AAEP,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AACtD,MAAIC,MAAM,GAAGD,UAAU,CAACE,QAAX,CAAoB,MAApB,CAAb;AACA,MAAIC,GAAG,GAAGH,UAAU,CAACE,QAAX,CAAoB,KAApB,CAAV;AACA,MAAIE,IAAI,GAAGJ,UAAU,CAACE,QAAX,CAAoB,MAApB,CAAX;AACA,MAAIG,EAAE,GAAGL,UAAU,CAACE,QAAX,CAAoB,GAApB,CAAT;AAEAX,EAAAA,SAAS,CAAE,YAAM;AAEfI,IAAAA,SAAS,CAACW,sBAAV,CAAiCT,QAAQ,CAACU,MAA1C,EAAkD;AAChDC,MAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AADqC,KAAlD;AAGD,GALQ,EAKN,EALM,CAAT;;AAOA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B,QAAIC,KAAK,GAAGC,QAAQ,CAACT,IAAD,CAApB;AAAA,QAA4BU,MAAM,GAAG,EAArC;;AAEA,SAAK,IAAIC,CAAC,GAAGH,KAAb,EAAoBG,CAAC,GAAGH,KAAK,GAAG,EAAhC,EAAoCG,CAAC,EAArC,EAAyC;AACvC,UAAIC,CAAC,GAAGD,CAAC,GAAG,EAAZ;AAAA,UAAgBE,CAAC,GAAGJ,QAAQ,CAACE,CAAC,GAAG,EAAL,CAA5B;AAEA,UAAIG,CAAC,GAAGf,GAAR;;AACA,UAAIc,CAAC,GAAG,CAAR,EAAW;AACTC,QAAAA,CAAC,GAAGjB,MAAM,CAACkB,IAAP,CAAYlB,MAAM,CAACkB,IAAP,CAAYC,OAAZ,CAAoBjB,GAApB,IAA2Bc,CAAvC,CAAJ;AACD;;AAEDH,MAAAA,MAAM,CAACpB,MAAM,CAACqB,CAAD,CAAP,CAAN,GAAoBd,MAAM,CAACoB,IAAP,CAAYH,CAAZ,EAAeI,MAAf,CAAsB5B,MAAM,CAACsB,CAAD,CAA5B,CAApB;AACD;;AAEDF,IAAAA,MAAM,CAACS,KAAP,GAAe,IAAf;AAEA,WAAOT,MAAP;AACD,GAjBD;;AAbsD,kBAgC5BtB,QAAQ,CAACmB,kBAAkB,EAAnB,CAhCoB;AAAA;AAAA,MAgC/Ca,eAhC+C;;AAkCtD,SACE,oBAAC,wBAAD;AAA0B,IAAA,UAAU,EAAExB,UAAtC;AAAkD,IAAA,eAAe,EAAEwB,eAAnE;AAAoF,IAAA,MAAM,EAAEvB,MAA5F;AAAoG,IAAA,EAAE,EAAEI,EAAxG;AAA4G,IAAA,GAAG,EAAEF,GAAjH;AAAsH,IAAA,IAAI,EAAEC,IAA5H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD,CArCD;;AAuCA,eAAeL,2BAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport NextPulverisationDetails from './NextPulverisationDetails'\n\nimport { PADDED } from '../constants'\n\nimport {Amplitude, AMPLITUDE_EVENTS} from '../amplitude'\nconst {PulvDetailsScreen: ampEvent} = AMPLITUDE_EVENTS\n\nconst NextPulverisationDetailsTop = ({ navigation }) => {\n  let result = navigation.getParam('data')\n  let day = navigation.getParam('day')\n  let hour = navigation.getParam('hour')\n  let ra = navigation.getParam('r')\n\n  useEffect( () => {\n    // console.log(\"Amplitude : \", ampEvent.render)\n    Amplitude.logEventWithProperties(ampEvent.render, {\n      timestamp: Date.now()\n    })\n  }, [])\n\n  const getNext12HoursData = () => {\n    let start = parseInt(hour), output = {}\n\n    for (let i = start; i < start + 12; i++) {\n      let h = i % 24, r = parseInt(i / 24)\n\n      let d = day\n      if (r > 0) {\n        d = result.days[result.days.indexOf(day) + r]\n      }\n\n      output[PADDED[i]] = result.data[d].hours1[PADDED[h]]\n    }\n\n    output.ready = true\n\n    return output\n  }\n\n  const [next12HoursData] = useState(getNext12HoursData())\n\n  return (\n    <NextPulverisationDetails navigation={navigation} next12HoursData={next12HoursData} result={result} ra={ra} day={day} hour={hour} />\n  )\n}\n\nexport default NextPulverisationDetailsTop"]},"metadata":{},"sourceType":"module"}