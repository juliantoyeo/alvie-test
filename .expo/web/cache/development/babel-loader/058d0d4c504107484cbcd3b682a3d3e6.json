{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/screens/MeteoDetailedDetails.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { SafeAreaView } from 'react-navigation';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { Button, Icon, Text, Left, Right, Body, Header, Title } from 'native-base';\nimport COLORS from \"../colors\";\nimport i18n from 'i18n-js';\nimport Map from \"../components/meteo-detailed/Map\";\nimport MapLegend from \"../components/meteo-detailed/MapLegend\";\nimport MeteoMetrics from \"../components/meteo-detailed/MeteoMetrics\";\nimport MeteoMapHeader from \"../components/meteo-detailed/MeteoMapHeader\";\nimport MeteoMapHeaderSelected from \"../components/meteo-detailed/MeteoMapHeaderSelected\";\nimport MeteoWhiteStatus from \"../components/meteo-detailed/MeteoWhiteStatus\";\nimport MeteoSlider from \"../components/meteo-detailed/MeteoSlider\";\nimport { PADDED } from \"../constants\";\nimport moment from 'moment';\nimport capitalize from \"../utils/capitalize\";\nimport { Amplitude, AMPLITUDE_EVENTS } from \"../amplitude\";\nvar ampEvent = AMPLITUDE_EVENTS.meteoDetailedDetailsScreen;\n\nvar MeteoDetailedDetails = function MeteoDetailedDetails(_ref) {\n  var navigation = _ref.navigation;\n  var MONTHS = [i18n.t('months.january'), i18n.t('months.february'), i18n.t('months.march'), i18n.t('months.april'), i18n.t('months.may'), i18n.t('months.june'), i18n.t('months.july'), i18n.t('months.august'), i18n.t('months.september'), i18n.t('months.october'), i18n.t('months.november'), i18n.t('months.december')];\n  var DAYS = [i18n.t('days.sunday'), i18n.t('days.monday'), i18n.t('days.tuesday'), i18n.t('days.wednesday'), i18n.t('days.thursday'), i18n.t('days.friday'), i18n.t('days.saturday')];\n\n  var _navigation$getParam = navigation.getParam('result'),\n      days = _navigation$getParam.days,\n      products = _navigation$getParam.products,\n      data = _navigation$getParam.data,\n      region = _navigation$getParam.region,\n      parcelles = _navigation$getParam.parcelles;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      selected = _useState2[0],\n      setSelected = _useState2[1];\n\n  var _useState3 = useState(10),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentHour = _useState4[0],\n      setCurrentHour = _useState4[1];\n\n  var getCurrentDay = useCallback(function () {\n    return days[0];\n  }, [days]);\n  var getCurrentDayData = useCallback(function () {\n    return data[getCurrentDay()].hours1[\"\" + products[0].id].data;\n  }, [days[0], products[0]]);\n  var getCurrentData = useCallback(function () {\n    return getCurrentDayData()[PADDED[parseInt(currentHour)]];\n  }, [days[0], products[0], currentHour]);\n  var getCurrentHourMetrics = useCallback(function () {\n    return data[PADDED[parseInt(currentHour)]].data;\n  }, [currentHour]);\n  var getBackground = useCallback(function () {\n    return COLORS[\"\" + getCurrentData().condition];\n  }, [currentHour]);\n  var getDay = useCallback(function () {\n    var md = moment.utc(days[0]);\n    return capitalize(DAYS[md.day()]) + \" \" + md.date() + \" \" + capitalize(MONTHS[md.month()]);\n  }, [days[0]]);\n  useEffect(function () {\n    Amplitude.logEventWithProperties(ampEvent.render, {\n      timestamp: Date.now()\n    });\n  }, []);\n  return React.createElement(SafeAreaView, {\n    style: [styles.statusbar, {\n      backgroundColor: Platform.OS === 'ios' ? 'black' : getBackground()\n    }],\n    forceInset: {\n      top: 'always'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, React.createElement(StatusBar, {\n    translucent: true,\n    backgroundColor: \"transparent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), React.createElement(ScrollView, {\n    style: [styles.container, {\n      backgroundColor: getBackground()\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, React.createElement(Header, {\n    hasTabs: true,\n    style: [styles.header, {\n      backgroundColor: getBackground()\n    }],\n    androidStatusBarColor: \"transparent\",\n    iosBarStyle: \"light-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, React.createElement(Left, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, React.createElement(Button, {\n    transparent: true,\n    onPress: function onPress() {\n      return navigation.goBack();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, React.createElement(Icon, {\n    name: \"close\",\n    style: {\n      color: '#fff'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }))), React.createElement(Body, {\n    style: styles.headerBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, React.createElement(Title, {\n    style: styles.headerTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, getDay()), React.createElement(Title, {\n    style: styles.headerTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, i18n.t('meteo_overlay.header', {\n    from: currentHour,\n    to: currentHour + 1\n  }))), React.createElement(Right, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: styles.details,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.productName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, i18n.t(\"products.\" + products[0].name)), React.createElement(Text, {\n    style: styles.currentCondition,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, i18n.t(\"intervention_map.\" + getCurrentData().condition.toLowerCase()))), React.createElement(MeteoMetrics, {\n    data: getCurrentHourMetrics(),\n    currentProduct: products[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }), React.createElement(MeteoSlider, {\n    currentHour: currentHour,\n    setCurrentHour: setCurrentHour,\n    data: getCurrentDayData(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }), React.createElement(View, {\n    style: styles.topWhiteContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, React.createElement(MeteoWhiteStatus, {\n    currentCondition: getCurrentData().condition,\n    parcelles: getCurrentData().parcelle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  })), selected && React.createElement(MeteoMapHeaderSelected, {\n    selected: selected,\n    data: getCurrentData().parcelle[selected],\n    productId: products[0].id,\n    isRacinaire: products[0].isRacinaire,\n    currentCondition: getCurrentData().condition,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }), !selected && React.createElement(MeteoMapHeader, {\n    selected: selected,\n    data: getCurrentData().parcelle,\n    isRacinaire: products[0].isRacinaire,\n    currentCondition: getCurrentData().condition,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: styles.mapviewContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, React.createElement(Map, {\n    region: region,\n    parcelles: parcelles,\n    selected: selected,\n    setSelected: setSelected,\n    currentData: getCurrentData().parcelle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  })), React.createElement(MapLegend, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }))));\n};\n\nvar styles = StyleSheet.create({\n  statusbar: {\n    flex: 1,\n    display: 'flex'\n  },\n  header: {\n    backgroundColor: 'transparent'\n  },\n  headerBody: {\n    flex: 3,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  headerTitle: {\n    color: '#fff',\n    fontFamily: 'nunito-regular',\n    fontSize: 20\n  },\n  container: {\n    display: 'flex'\n  },\n  details: {\n    backgroundColor: 'transparent',\n    display: 'flex',\n    paddingTop: 20,\n    justifyContent: 'center',\n    flex: 1\n  },\n  productName: {\n    padding: 10,\n    fontFamily: 'nunito-bold',\n    textTransform: 'uppercase',\n    fontSize: 14,\n    color: '#fff'\n  },\n  currentCondition: {\n    padding: 10,\n    fontFamily: 'nunito-heavy',\n    textTransform: 'uppercase',\n    fontSize: 14,\n    color: '#fff'\n  },\n  topWhiteContainer: {\n    paddingRight: 15,\n    paddingBottom: 0\n  },\n  mapviewContainer: {\n    top: -20\n  }\n});\nexport default MeteoDetailedDetails;","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/screens/MeteoDetailedDetails.js"],"names":["React","useState","useCallback","useEffect","SafeAreaView","Button","Icon","Text","Left","Right","Body","Header","Title","COLORS","i18n","Map","MapLegend","MeteoMetrics","MeteoMapHeader","MeteoMapHeaderSelected","MeteoWhiteStatus","MeteoSlider","PADDED","moment","capitalize","Amplitude","AMPLITUDE_EVENTS","ampEvent","meteoDetailedDetailsScreen","MeteoDetailedDetails","navigation","MONTHS","t","DAYS","getParam","days","products","data","region","parcelles","selected","setSelected","currentHour","setCurrentHour","getCurrentDay","getCurrentDayData","hours1","id","getCurrentData","parseInt","getCurrentHourMetrics","getBackground","condition","getDay","md","utc","day","date","month","logEventWithProperties","render","timestamp","Date","now","styles","statusbar","backgroundColor","Platform","OS","top","container","header","flex","goBack","color","headerBody","headerTitle","from","to","details","display","alignItems","justifyContent","productName","name","currentCondition","toLowerCase","topWhiteContainer","parcelle","isRacinaire","mapviewContainer","StyleSheet","create","fontFamily","fontSize","paddingTop","padding","textTransform","paddingRight","paddingBottom"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { SafeAreaView } from 'react-navigation';\nimport { ScrollView, StyleSheet, View, StatusBar } from 'react-native';\nimport { Button, Icon, Text, Left, Right, Body, Header, Title } from 'native-base';\n\nimport COLORS from '../colors'\nimport i18n from 'i18n-js'\n\nimport Map from '../components/meteo-detailed/Map'\nimport MapLegend from '../components/meteo-detailed/MapLegend'\nimport MeteoMetrics from '../components/meteo-detailed/MeteoMetrics'\nimport MeteoMapHeader from '../components/meteo-detailed/MeteoMapHeader'\nimport MeteoMapHeaderSelected from '../components/meteo-detailed/MeteoMapHeaderSelected'\nimport MeteoWhiteStatus from '../components/meteo-detailed/MeteoWhiteStatus';\nimport MeteoSlider from '../components/meteo-detailed/MeteoSlider';\n\nimport { PADDED } from '../constants'\n\nimport moment from 'moment'\nimport capitalize from '../utils/capitalize'\n\nimport {Amplitude, AMPLITUDE_EVENTS} from '../amplitude'\nconst {meteoDetailedDetailsScreen: ampEvent} = AMPLITUDE_EVENTS\n\nconst MeteoDetailedDetails = ({ navigation }) => {\n  const MONTHS = [\n    i18n.t('months.january'),\n    i18n.t('months.february'),\n    i18n.t('months.march'),\n    i18n.t('months.april'),\n    i18n.t('months.may'),\n    i18n.t('months.june'),\n    i18n.t('months.july'),\n    i18n.t('months.august'),\n    i18n.t('months.september'),\n    i18n.t('months.october'),\n    i18n.t('months.november'),\n    i18n.t('months.december'),\n  ]\n  \n  const DAYS = [\n    i18n.t('days.sunday'),\n    i18n.t('days.monday'),\n    i18n.t('days.tuesday'),\n    i18n.t('days.wednesday'),\n    i18n.t('days.thursday'),\n    i18n.t('days.friday'),\n    i18n.t('days.saturday'),\n  ]\n\n  let { days, products, data, region, parcelles } = navigation.getParam('result')\n\n  const [selected, setSelected] = useState(null)\n\n  const [currentHour, setCurrentHour] = useState(10)\n\n  const getCurrentDay = useCallback(() => {\n    return days[0]\n  }, [days])\n\n  const getCurrentDayData = useCallback(() => {\n    return data[getCurrentDay()].hours1[`${products[0].id}`].data\n  }, [days[0], products[0]])\n\n  const getCurrentData = useCallback(() => {\n    return getCurrentDayData()[PADDED[parseInt(currentHour)]]\n  }, [days[0], products[0], currentHour])\n\n  const getCurrentHourMetrics = useCallback(() => {\n    return data[PADDED[parseInt(currentHour)]].data\n  }, [currentHour])\n\n  const getBackground = useCallback(() => {\n    return COLORS[`${getCurrentData().condition}`]\n  }, [currentHour])\n\n  const getDay = useCallback(() => {\n    let md = moment.utc(days[0])\n\n    return `${capitalize(DAYS[md.day()])} ${md.date()} ${capitalize(MONTHS[md.month()])}`\n  }, [days[0]])\n\n  useEffect(()=> {\n    // console.log(\"Amplitude : \", ampEvent.render)\n    Amplitude.logEventWithProperties(ampEvent.render, {\n      timestamp: Date.now()\n    })\n  }, [])\n\n  return (\n    <SafeAreaView style={[styles.statusbar, {backgroundColor: Platform.OS === 'ios' ? 'black' : getBackground()}]} forceInset={{top:'always'}}>\n      <StatusBar translucent backgroundColor=\"transparent\" />\n      <ScrollView style={[styles.container, { backgroundColor: getBackground() }]}>\n        <Header hasTabs style={[styles.header, { backgroundColor: getBackground() }]} androidStatusBarColor=\"transparent\" iosBarStyle=\"light-content\">\n          <Left style={{ flex: 1 }}>\n            <Button transparent onPress={() => navigation.goBack()}>\n              <Icon name='close' style={{ color: '#fff' }} />\n            </Button>\n          </Left>\n          <Body style={styles.headerBody}>\n            <Title style={styles.headerTitle}>{getDay()}</Title>\n            <Title style={styles.headerTitle}>{i18n.t('meteo_overlay.header', { from: currentHour, to: currentHour+1 })}</Title>\n          </Body>\n          <Right style={{ flex: 1 }}></Right>\n        </Header>\n\n        <View style={styles.details}>\n          <View style={{ display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n            <Text style={styles.productName}>{ i18n.t(`products.${products[0].name}`) }</Text>\n            <Text style={styles.currentCondition}>{i18n.t(`intervention_map.${getCurrentData().condition.toLowerCase()}`)}</Text>\n          </View>\n          <MeteoMetrics data={getCurrentHourMetrics()} currentProduct={products[0]} />\n          \n          <MeteoSlider currentHour={currentHour} setCurrentHour={setCurrentHour} data={getCurrentDayData()} />\n\n          <View style={styles.topWhiteContainer}>\n            <MeteoWhiteStatus currentCondition={getCurrentData().condition} parcelles={getCurrentData().parcelle} />\n          </View>\n\n          { selected && (\n            <MeteoMapHeaderSelected selected={selected} data={getCurrentData().parcelle[selected]} productId={products[0].id} isRacinaire={products[0].isRacinaire} currentCondition={getCurrentData().condition} />\n          )}\n          { !selected && (\n            <MeteoMapHeader selected={selected} data={getCurrentData().parcelle} isRacinaire={products[0].isRacinaire} currentCondition={getCurrentData().condition} />\n          )}\n\n          <View style={styles.mapviewContainer}>\n            <Map region={region} parcelles={parcelles} selected={selected} setSelected={setSelected} currentData={getCurrentData().parcelle} />\n          </View>\n\n          <MapLegend />\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  statusbar: { \n    flex: 1, \n    display: 'flex',\n  },\n  header: {\n    backgroundColor: 'transparent'\n  },\n  headerBody: {\n    flex: 3,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  headerTitle: {\n    color: '#fff',\n    fontFamily: 'nunito-regular',\n    fontSize: 20\n  },  \n  container: {\n    display: 'flex',\n  },\n  details: {\n    backgroundColor: 'transparent',\n    display: 'flex',\n    paddingTop: 20,\n    justifyContent: 'center',\n    flex: 1,\n  },\n  productName: {\n    padding: 10,\n    fontFamily: 'nunito-bold',\n    textTransform: 'uppercase',\n    fontSize: 14,\n    color: '#fff',\n  },\n  currentCondition: {\n    padding: 10,\n    fontFamily: 'nunito-heavy',\n    textTransform: 'uppercase',\n    fontSize: 14,\n    color: '#fff',\n  },\n  topWhiteContainer: {\n    paddingRight: 15,\n    paddingBottom: 0\n  }, \n  mapviewContainer: {\n    top: -20,\n  },\n});\n  \nexport default MeteoDetailedDetails\n\n\n"]},"metadata":{},"sourceType":"module"}