{"ast":null,"code":"var _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/pulverisation-detailed/ExtraMetrics.js\";\nimport React, { useCallback } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport i18n from 'i18n-js';\nimport { connect } from 'react-redux';\n\nvar ExtraMetrics = function ExtraMetrics(_ref) {\n  var currentHourMetrics = _ref.currentHourMetrics,\n      phytoProductSelected = _ref.phytoProductSelected;\n  var getRFromProduct = useCallback(function () {\n    var p = [];\n\n    for (var i = 0; i < phytoProductSelected.length; i++) {\n      var productId = phytoProductSelected[i];\n\n      switch (productId) {\n        case 1:\n        case 7:\n          p.push(\"r6\");\n\n        case 11:\n          p.push(\"r3\");\n\n        default:\n          p.push(\"r2\");\n      }\n    }\n\n    if (p.includes(\"r6\")) {\n      return \"r6\";\n    } else if (p.includes(\"r3\")) {\n      return \"r3\";\n    } else {\n      return \"r2\";\n    }\n  }, [phytoProductSelected]);\n  return React.createElement(View, {\n    style: styles.metrics,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.metricsText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, i18n.t(\"meteo_overlay.precipitation_\" + getRFromProduct(), {\n    value: Math.round(currentHourMetrics.prevprecipitation + currentHourMetrics[getRFromProduct()])\n  })), React.createElement(Text, {\n    style: styles.metricsText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, i18n.t(\"realtime.gel_\" + (currentHourMetrics.t3 <= -2 ? 'risky' : 'none'))), React.createElement(Text, {\n    style: styles.metricsText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, i18n.t(\"meteo_overlay.delta_temp\", {\n    value: Math.round(currentHourMetrics.deltatemp)\n  })));\n};\n\nvar styles = StyleSheet.create({\n  metrics: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-evenly',\n    paddingBottom: 15\n  },\n  metricsText: {\n    color: '#fff',\n    fontSize: 14,\n    fontFamily: 'nunito-bold'\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    phytoProductList: state.pulve.phytoProductList,\n    phytoProductSelected: state.pulve.phytoProductSelected\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, props) {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExtraMetrics);","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/pulverisation-detailed/ExtraMetrics.js"],"names":["React","useCallback","i18n","connect","ExtraMetrics","currentHourMetrics","phytoProductSelected","getRFromProduct","p","i","length","productId","push","includes","styles","metrics","metricsText","t","value","Math","round","prevprecipitation","t3","deltatemp","StyleSheet","create","display","flexDirection","alignItems","justifyContent","paddingBottom","color","fontSize","fontFamily","mapStateToProps","state","phytoProductList","pulve","mapDispatchToProps","dispatch","props"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react'\nimport { StyleSheet, View, Text } from 'react-native'\n\nimport i18n from 'i18n-js'\n\nimport { connect } from 'react-redux'\n\nconst ExtraMetrics = ({ currentHourMetrics, phytoProductSelected }) => {\n  const getRFromProduct = useCallback(() => {\n    let p = []\n    for (let i = 0; i < phytoProductSelected.length; i++) {\n      let productId = phytoProductSelected[i]\n      switch(productId) {\n        case 1:\n        case 7:\n          p.push(\"r6\")\n\n        case 11:\n          p.push(\"r3\")\n\n        default:\n          p.push(\"r2\")\n      }\n    }\n\n    if (p.includes(\"r6\")) {\n      return \"r6\"\n    } else if (p.includes(\"r3\")) {\n      return \"r3\"\n    } else {\n      return \"r2\"\n    }\n  }, [phytoProductSelected])\n\n  return (\n    <View style={styles.metrics}>\n      <Text style={styles.metricsText}>{i18n.t(`meteo_overlay.precipitation_${getRFromProduct()}`, { value: Math.round(currentHourMetrics.prevprecipitation + currentHourMetrics[getRFromProduct()]) })}</Text>\n      <Text style={styles.metricsText}>{i18n.t(`realtime.gel_${currentHourMetrics.t3 <= -2 ? 'risky' : 'none'}`)}</Text>\n      <Text style={styles.metricsText}>{i18n.t(`meteo_overlay.delta_temp`, { value: Math.round(currentHourMetrics.deltatemp) })}</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  metrics: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-evenly',\n    paddingBottom: 15\n  },\n  metricsText: {\n    color: '#fff',\n    fontSize: 14,\n    fontFamily: 'nunito-bold'\n  }\n})\n\nconst mapStateToProps = (state) => ({\n  phytoProductList: state.pulve.phytoProductList,\n  phytoProductSelected: state.pulve.phytoProductSelected,\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExtraMetrics);"]},"metadata":{},"sourceType":"module"}