{"ast":null,"code":"var _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/HygoCulturePicker.js\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { SafeAreaView } from 'react-navigation';\nimport { Header, Left, Body, Title, Right, Icon, Button, Container, Content } from 'native-base';\nimport COLORS from \"../colors\";\nimport i18n from 'i18n-js';\nimport { connect } from 'react-redux';\nimport { updateCulturesSelected as _updateCulturesSelected } from \"../store/actions/pulveActions\";\nimport { updateUICultures } from \"../api/hygoApi\";\n\nvar HygoCulturePicker = function HygoCulturePicker(_ref) {\n  var navigation = _ref.navigation,\n      cultures = _ref.cultures,\n      culturesSelected = _ref.culturesSelected,\n      updateCulturesSelected = _ref.updateCulturesSelected;\n  return React.createElement(SafeAreaView, {\n    style: [styles.statusbar, {\n      backgroundColor: 'black'\n    }],\n    forceInset: {\n      top: 'always'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, React.createElement(StatusBar, {\n    translucent: true,\n    backgroundColor: \"transparent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }), React.createElement(Container, {\n    style: styles.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, React.createElement(Header, {\n    hasTabs: true,\n    style: [styles.header],\n    androidStatusBarColor: COLORS.BEIGE,\n    iosBarStyle: \"light-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, React.createElement(Left, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }, React.createElement(Button, {\n    transparent: true,\n    onPress: function onPress() {\n      return navigation.goBack();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, React.createElement(Icon, {\n    name: \"close\",\n    style: {\n      color: COLORS.DARK_GREEN\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 15\n    }\n  }))), React.createElement(Body, {\n    style: styles.headerBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, React.createElement(Title, {\n    style: styles.headerTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, i18n.t('picker.header'))), React.createElement(Right, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  })), React.createElement(Content, {\n    contentContainerStyle: [styles.container],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.listContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, React.createElement(TouchableOpacity, {\n    key: \"all\",\n    style: styles.elemContainer,\n    onPress: function onPress() {\n      var p = [];\n\n      if (cultures.length !== culturesSelected.length) {\n        p = JSON.parse(JSON.stringify(cultures.map(function (c) {\n          return c.id;\n        })));\n      }\n\n      updateUICultures(p);\n      updateCulturesSelected(p);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: [styles.elemText, {\n      fontWeight: culturesSelected.length === cultures.length ? 'bold' : 'normal'\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }\n  }, i18n.t('pulverisation.all_cultures')), culturesSelected.length === cultures.length && React.createElement(Icon, {\n    name: \"check\",\n    type: \"AntDesign\",\n    style: [styles.elemIcon, {\n      color: culturesSelected.length === cultures.length ? COLORS.DARK_GREEN : COLORS.GREY\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  })), cultures.map(function (d) {\n    return React.createElement(TouchableOpacity, {\n      key: d.id,\n      style: styles.elemContainer,\n      onPress: function onPress() {\n        var i = d.id;\n        var p = JSON.parse(JSON.stringify(culturesSelected));\n\n        if (culturesSelected.indexOf(i) > -1) {\n          p = p.filter(function (e) {\n            return e !== i;\n          });\n        } else {\n          p.push(i);\n        }\n\n        updateUICultures(p);\n        updateCulturesSelected(p);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, React.createElement(Text, {\n      style: [styles.elemText, {\n        fontWeight: culturesSelected.indexOf(d.id) > -1 ? 'bold' : 'normal'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 19\n      }\n    }, i18n.t(\"cultures.\" + d.name)), culturesSelected.indexOf(d.id) > -1 && React.createElement(Icon, {\n      name: \"check\",\n      type: \"AntDesign\",\n      style: [styles.elemIcon, {\n        color: culturesSelected.indexOf(d.id) > -1 ? COLORS.DARK_GREEN : COLORS.GREY\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }));\n  })))));\n};\n\nvar styles = StyleSheet.create({\n  header: {\n    backgroundColor: COLORS.BEIGE\n  },\n  headerBody: {\n    flex: 4,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  headerTitle: {\n    color: '#fff',\n    fontFamily: 'nunito-regular',\n    fontSize: 20,\n    color: COLORS.DARK_GREEN\n  },\n  statusbar: {\n    display: 'flex',\n    backgroundColor: COLORS.BEIGE,\n    flex: 1\n  },\n  elemContainer: {\n    paddingHorizontal: 20,\n    paddingVertical: 20,\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'flex-start'\n  },\n  elemText: {\n    fontFamily: 'nunito-regular',\n    fontSize: 16,\n    color: COLORS.DARK_GREEN,\n    flex: 1\n  },\n  elemIcon: {\n    fontSize: 20,\n    color: COLORS.GREY\n  },\n  content: {\n    flex: 1,\n    display: 'flex',\n    backgroundColor: COLORS.BEIGE\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cultures: state.metadata.cultures,\n    culturesSelected: state.pulve.culturesSelected\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, props) {\n  return {\n    updateCulturesSelected: function updateCulturesSelected(selected) {\n      return dispatch(_updateCulturesSelected(selected));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HygoCulturePicker);","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/HygoCulturePicker.js"],"names":["React","useState","SafeAreaView","Header","Left","Body","Title","Right","Icon","Button","Container","Content","COLORS","i18n","connect","updateCulturesSelected","updateUICultures","HygoCulturePicker","navigation","cultures","culturesSelected","styles","statusbar","backgroundColor","top","content","header","BEIGE","flex","goBack","color","DARK_GREEN","headerBody","headerTitle","t","container","listContent","elemContainer","p","length","JSON","parse","stringify","map","c","id","elemText","fontWeight","elemIcon","GREY","d","i","indexOf","filter","e","push","name","StyleSheet","create","display","justifyContent","alignItems","fontFamily","fontSize","paddingHorizontal","paddingVertical","flexDirection","mapStateToProps","state","metadata","pulve","mapDispatchToProps","dispatch","props","selected"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { StyleSheet, StatusBar, ScrollView, View, Text , TouchableOpacity} from 'react-native'\n\nimport { SafeAreaView } from 'react-navigation'\n\nimport { Header, Left, Body, Title, Right, Icon, Button, Container, Content } from 'native-base'\n\nimport COLORS from '../colors'\n\nimport i18n from 'i18n-js'\n\nimport { connect } from 'react-redux'\nimport { updateCulturesSelected } from '../store/actions/pulveActions'\n\nimport { updateUICultures } from '../api/hygoApi'\n\nconst HygoCulturePicker = ({ navigation, cultures, culturesSelected, updateCulturesSelected }) => {\n\n  return (\n    <SafeAreaView style={[styles.statusbar, { backgroundColor: 'black' }]} forceInset={{top:'always'}}>\n      <StatusBar translucent backgroundColor=\"transparent\" />\n      <Container style={styles.content}>\n        <Header hasTabs style={[styles.header]} androidStatusBarColor={COLORS.BEIGE} iosBarStyle=\"light-content\">\n          <Left style={{ flex: 1 }}>\n            <Button transparent onPress={() => navigation.goBack()}>\n              <Icon name='close' style={{ color: COLORS.DARK_GREEN }} />\n            </Button>\n          </Left>\n          <Body style={styles.headerBody}>\n            <Title style={styles.headerTitle}>{i18n.t('picker.header')}</Title>\n          </Body>\n          <Right style={{ flex: 1 }}></Right>\n        </Header>\n        <Content contentContainerStyle={[styles.container]}>\n          <View style={styles.listContent}>\n            <TouchableOpacity key={\"all\"} style={styles.elemContainer} onPress={() => {\n              let p = []\n              if (cultures.length !== culturesSelected.length) {\n                p = JSON.parse(JSON.stringify(cultures.map(c => c.id)))\n              }\n              updateUICultures(p)\n              updateCulturesSelected(p)\n            }}>\n              <Text style={[styles.elemText, { fontWeight: culturesSelected.length === cultures.length ? 'bold' : 'normal'} ]}>{i18n.t('pulverisation.all_cultures')}</Text>\n              { culturesSelected.length === cultures.length && (\n                <Icon name=\"check\" type=\"AntDesign\" style={[styles.elemIcon, { color: culturesSelected.length === cultures.length ? COLORS.DARK_GREEN : COLORS.GREY } ]} />\n              )}\n            </TouchableOpacity>\n\n            { cultures.map(d => {\n              return (\n                <TouchableOpacity key={d.id} style={styles.elemContainer} onPress={() => {\n                  let i = d.id\n                  \n                  let p = JSON.parse(JSON.stringify(culturesSelected))\n                  if (culturesSelected.indexOf(i) > -1) {\n                    p = p.filter(e => e !== i)\n                  } else {\n                    p.push(i)\n                  }\n\n                  updateUICultures(p)\n                  updateCulturesSelected(p)\n                }}>\n                  <Text style={[styles.elemText, { fontWeight: culturesSelected.indexOf(d.id) > -1 ? 'bold' : 'normal'} ]}>{i18n.t(`cultures.${d.name}`)}</Text>\n                  { culturesSelected.indexOf(d.id) > -1 && (\n                    <Icon name=\"check\" type=\"AntDesign\" style={[styles.elemIcon, { color: culturesSelected.indexOf(d.id) > -1 ? COLORS.DARK_GREEN : COLORS.GREY } ]} />\n                  )}\n                </TouchableOpacity>\n              )\n            })}\n          </View>\n      </Content>\n      </Container>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    backgroundColor: COLORS.BEIGE,\n  },\n  headerBody: {\n    flex: 4,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  headerTitle: {\n    color: '#fff',\n    fontFamily: 'nunito-regular',\n    fontSize: 20,\n    color: COLORS.DARK_GREEN\n  },  \n  statusbar: {\n    display: 'flex',\n    backgroundColor: COLORS.BEIGE,\n    flex: 1,\n  },\n  elemContainer: {\n    paddingHorizontal: 20,\n    paddingVertical: 20,\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'flex-start'\n  },\n  elemText: {\n    fontFamily: 'nunito-regular',\n    fontSize: 16,\n    color: COLORS.DARK_GREEN,\n    flex: 1,\n  },\n  elemIcon: {\n    fontSize: 20,\n    color: COLORS.GREY\n  },\n  content: {\n    flex: 1,\n    display: 'flex',\n    backgroundColor: COLORS.BEIGE,\n  }\n})\n\nconst mapStateToProps = (state) => ({\n  cultures: state.metadata.cultures,\n  culturesSelected: state.pulve.culturesSelected,\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  updateCulturesSelected: (selected) => dispatch(updateCulturesSelected(selected)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HygoCulturePicker);"]},"metadata":{},"sourceType":"module"}