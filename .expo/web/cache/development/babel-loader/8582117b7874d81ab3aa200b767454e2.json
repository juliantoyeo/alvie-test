{"ast":null,"code":"var _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/meteo-detailed/MeteoWhiteStatus.js\";\nimport React, { useCallback } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport i18n from 'i18n-js';\nimport COLORS from \"../../colors\";\n\nvar MeteoWhiteStatus = function MeteoWhiteStatus(_ref) {\n  var parcelles = _ref.parcelles,\n      currentCondition = _ref.currentCondition;\n  var getTextForWhitePanel = useCallback(function () {\n    var conditions = {\n      EXCELLENT: [],\n      GOOD: [],\n      CORRECT: [],\n      BAD: [],\n      FORBIDDEN: []\n    };\n    var pk = Object.keys(parcelles);\n\n    for (var i = 0; i < pk.length; i++) {\n      conditions[parcelles[pk[i]].condition].push(i);\n    }\n\n    if (currentCondition === 'EXCELLENT' && conditions.EXCELLENT.length === pk.length) {\n      return i18n.t(\"meteo_overlay.white_\" + currentCondition + \"_everywhere\");\n    } else if (currentCondition === 'EXCELLENT') {\n      return i18n.t(\"meteo_overlay.white_\" + currentCondition + \"_some\", {\n        value: Math.round(parseFloat(conditions.EXCELLENT.length) / pk.length * 100)\n      });\n    } else if (currentCondition === 'GOOD' && conditions.GOOD.length === pk.length) {\n      return i18n.t(\"meteo_overlay.white_\" + currentCondition + \"_everywhere\");\n    } else if (currentCondition === 'GOOD') {\n      return i18n.t(\"meteo_overlay.white_\" + currentCondition + \"_some\", {\n        value: Math.round(parseFloat(conditions.GOOD.length + conditions.EXCELLENT.length) / pk.length * 100)\n      });\n    } else if (currentCondition === 'CORRECT' && conditions.CORRECT.length === pk.length) {\n      return i18n.t(\"meteo_overlay.white_\" + currentCondition + \"_everywhere\");\n    } else if (currentCondition === 'CORRECT') {\n      return i18n.t(\"meteo_overlay.white_\" + currentCondition + \"_some\", {\n        value: Math.round(parseFloat(conditions.CORRECT.length + conditions.GOOD.length + conditions.EXCELLENT.length) / pk.length * 100)\n      });\n    } else if (conditions.FORBIDDEN.length + conditions.BAD.length === pk.length) {\n      if (conditions.BAD.length !== 0) {\n        return i18n.t(\"meteo_overlay.white_BAD_everywhere\");\n      } else {\n        return i18n.t(\"meteo_overlay.white_FORBIDDEN_everywhere\");\n      }\n    } else if (currentCondition === 'BAD' || currentCondition === 'FORBIDDEN') {\n      return i18n.t(\"meteo_overlay.white_CORRECT_some\", {\n        value: Math.round(parseFloat(conditions.CORRECT.length + conditions.GOOD.length + conditions.EXCELLENT.length) / pk.length * 100)\n      });\n    }\n  }, [parcelles, currentCondition]);\n  return React.createElement(View, {\n    style: styles.whiteContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.whiteText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, getTextForWhitePanel()));\n};\n\nvar styles = StyleSheet.create({\n  whiteContainer: {\n    backgroundColor: '#fff',\n    borderTopRightRadius: 30,\n    paddingVertical: 27,\n    paddingHorizontal: 34,\n    shadowRadius: 3,\n    shadowColor: '#000',\n    shadowOpacity: .2,\n    shadowOffset: {\n      width: 0,\n      height: 3\n    },\n    elevation: 3\n  },\n  whiteText: {\n    fontFamily: 'nunito-italic',\n    fontSize: 16,\n    color: COLORS.DARK_GREEN\n  }\n});\nexport default MeteoWhiteStatus;","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/meteo-detailed/MeteoWhiteStatus.js"],"names":["React","useCallback","i18n","COLORS","MeteoWhiteStatus","parcelles","currentCondition","getTextForWhitePanel","conditions","EXCELLENT","GOOD","CORRECT","BAD","FORBIDDEN","pk","Object","keys","i","length","condition","push","t","value","Math","round","parseFloat","styles","whiteContainer","whiteText","StyleSheet","create","backgroundColor","borderTopRightRadius","paddingVertical","paddingHorizontal","shadowRadius","shadowColor","shadowOpacity","shadowOffset","width","height","elevation","fontFamily","fontSize","color","DARK_GREEN"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react'\n\nimport { StyleSheet, View, Text } from 'react-native'\n\nimport i18n from 'i18n-js'\n\nimport COLORS from '../../colors'\n\nconst MeteoWhiteStatus = ({ parcelles, currentCondition }) => {\n  const getTextForWhitePanel = useCallback(() => {\n    let conditions = { EXCELLENT: [], GOOD: [], CORRECT: [], BAD: [], FORBIDDEN: [] }\n\n    let pk = Object.keys(parcelles)\n    for (let i = 0; i < pk.length; i++) {\n      conditions[parcelles[pk[i]].condition].push(i)\n    }\n\n    if (currentCondition === 'EXCELLENT' && conditions.EXCELLENT.length === pk.length) {\n      return i18n.t(`meteo_overlay.white_${currentCondition}_everywhere`)\n    } else if (currentCondition === 'EXCELLENT') {\n      return i18n.t(`meteo_overlay.white_${currentCondition}_some`, { \n        value: Math.round(parseFloat(conditions.EXCELLENT.length) / pk.length * 100)\n      })\n    } else if (currentCondition === 'GOOD' && conditions.GOOD.length === pk.length) {\n      return i18n.t(`meteo_overlay.white_${currentCondition}_everywhere`)\n    } else if (currentCondition === 'GOOD') {\n      return i18n.t(`meteo_overlay.white_${currentCondition}_some`, { \n        value: Math.round(parseFloat(conditions.GOOD.length + conditions.EXCELLENT.length) / pk.length * 100)\n      })\n    } else if (currentCondition === 'CORRECT' && conditions.CORRECT.length === pk.length) {\n      return i18n.t(`meteo_overlay.white_${currentCondition}_everywhere`)\n    } else if (currentCondition === 'CORRECT') {\n      return i18n.t(`meteo_overlay.white_${currentCondition}_some`, { \n        value: Math.round(parseFloat(conditions.CORRECT.length + conditions.GOOD.length + conditions.EXCELLENT.length) / pk.length * 100)\n      })\n    } else if (conditions.FORBIDDEN.length + conditions.BAD.length === pk.length) {\n      if (conditions.BAD.length !== 0) {\n        return i18n.t(`meteo_overlay.white_BAD_everywhere`)\n      } else {\n        return i18n.t(`meteo_overlay.white_FORBIDDEN_everywhere`)\n      }\n    } else if (currentCondition === 'BAD' || currentCondition === 'FORBIDDEN') {\n      return i18n.t(`meteo_overlay.white_CORRECT_some`, { \n        value: Math.round(parseFloat(conditions.CORRECT.length + conditions.GOOD.length + conditions.EXCELLENT.length) / pk.length * 100)\n      })\n    }\n  }, [parcelles, currentCondition])\n\n  return (\n    <View style={styles.whiteContainer}>\n      <Text style={styles.whiteText}>{getTextForWhitePanel()}</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  whiteContainer: {\n    backgroundColor: '#fff',\n    borderTopRightRadius: 30,\n    paddingVertical: 27,\n    paddingHorizontal: 34,\n    shadowRadius: 3,\n    shadowColor: '#000',\n    shadowOpacity: .2,\n    shadowOffset: {\n      width: 0,\n      height: 3\n    },\n    elevation: 3\n  },\n  whiteText: {\n    fontFamily: 'nunito-italic',\n    fontSize: 16,\n    color: COLORS.DARK_GREEN\n  },\n})\n\nexport default MeteoWhiteStatus\n"]},"metadata":{},"sourceType":"module"}