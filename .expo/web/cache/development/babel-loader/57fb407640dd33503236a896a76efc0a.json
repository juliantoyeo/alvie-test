{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  parcelles: [],\n  cultures: [],\n  lastMeteoLoad: null\n};\nexport default authReducer = function authReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var nextState;\n\n  switch (action.type) {\n    case 'UPDATE_PARCELLES':\n      nextState = _objectSpread({}, state, {\n        parcelles: action.parcelles\n      });\n      return nextState || state;\n\n    case 'UPDATE_CULTURES':\n      nextState = _objectSpread({}, state, {\n        cultures: action.cultures\n      });\n      return nextState || state;\n\n    case 'METEO_SYNCED':\n      nextState = _objectSpread({}, state, {\n        lastMeteoLoad: action.now\n      });\n      return nextState || state;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/store/reducers/metaReducer.js"],"names":["initialState","parcelles","cultures","lastMeteoLoad","authReducer","state","action","nextState","type","now"],"mappings":";;;;;;AACA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,aAAa,EAAE;AAHI,CAArB;AAMA,eAAeC,WAAW,GAAG,uBAAkC;AAAA,MAAjCC,KAAiC,uEAAzBL,YAAyB;AAAA,MAAXM,MAAW;AAC7D,MAAIC,SAAJ;;AACA,UAAQD,MAAM,CAACE,IAAf;AACE,SAAK,kBAAL;AACED,MAAAA,SAAS,qBACJF,KADI;AAEPJ,QAAAA,SAAS,EAAEK,MAAM,CAACL;AAFX,QAAT;AAIA,aAAOM,SAAS,IAAIF,KAApB;;AAEF,SAAK,iBAAL;AACEE,MAAAA,SAAS,qBACJF,KADI;AAEPH,QAAAA,QAAQ,EAAEI,MAAM,CAACJ;AAFV,QAAT;AAIA,aAAOK,SAAS,IAAIF,KAApB;;AAEF,SAAK,cAAL;AACEE,MAAAA,SAAS,qBACJF,KADI;AAEPF,QAAAA,aAAa,EAAEG,MAAM,CAACG;AAFf,QAAT;AAIA,aAAOF,SAAS,IAAIF,KAApB;;AAEF;AACE,aAAOA,KAAP;AAvBJ;AAyBD,CA3BD","sourcesContent":["\nconst initialState = {\n  parcelles: [],\n  cultures: [],\n  lastMeteoLoad: null,\n}\n\nexport default authReducer = (state = initialState, action) => {\n  let nextState\n  switch (action.type) {\n    case 'UPDATE_PARCELLES':\n      nextState = {\n        ...state,\n        parcelles: action.parcelles,\n      }\n      return nextState || state;\n    \n    case 'UPDATE_CULTURES':\n      nextState = {\n        ...state,\n        cultures: action.cultures,\n      }\n      return nextState || state;\n\n    case 'METEO_SYNCED':\n      nextState = {\n        ...state,\n        lastMeteoLoad: action.now,\n      }\n      return nextState || state;\n\n    default:\n      return state\n  }\n};"]},"metadata":{},"sourceType":"module"}