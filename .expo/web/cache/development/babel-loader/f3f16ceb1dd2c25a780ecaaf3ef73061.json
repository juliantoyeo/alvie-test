{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/screens/FieldsScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useRef, createRef } from 'react';\nimport MapView, { Polygon } from 'react-native-maps';\nimport { SafeAreaView } from 'react-navigation';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { connect } from 'react-redux';\nimport { Left, Right, Body, Title, Header, Button, Icon } from 'native-base';\nimport COLORS from \"../colors\";\nimport i18n from 'i18n-js';\nimport { Amplitude, AMPLITUDE_EVENTS } from \"../amplitude\";\nvar ampEvent = AMPLITUDE_EVENTS.fieldsScreen;\n\nvar FieldsScreen = function FieldsScreen(_ref) {\n  var navigation = _ref.navigation,\n      parcelles = _ref.parcelles;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      selected = _useState2[0],\n      setSelected = _useState2[1];\n\n  var _useState3 = useState(i18n.t('fields.parcelles', {\n    value: parcelles.fields.length\n  })),\n      _useState4 = _slicedToArray(_useState3, 2),\n      legend = _useState4[0],\n      setLegend = _useState4[1];\n\n  useEffect(function () {\n    Amplitude.logEventWithProperties(ampEvent.render, {\n      timestamp: Date.now()\n    });\n  }, []);\n\n  var getRegion = function getRegion() {\n    var center = {\n      longitude: (parcelles.region.lon_max - parcelles.region.lon_min) / 2 + parcelles.region.lon_min,\n      latitude: (parcelles.region.lat_max - parcelles.region.lat_min) / 2 + parcelles.region.lat_min\n    };\n\n    var r = _objectSpread({}, center, {\n      longitudeDelta: Math.max(0.0222, Math.abs(parcelles.region.lon_max - center.longitude)),\n      latitudeDelta: Math.max(0.0121, Math.abs(parcelles.region.lat_max - center.latitude))\n    });\n\n    return r;\n  };\n\n  useEffect(function () {\n    if (selected !== null) {\n      var str_culture = i18n.t('fields.culture', {\n        value: i18n.t(\"cultures.\" + parcelles.fields[selected].culture_name) || i18n.t('fields.unknown')\n      });\n      var str_area = parcelles.fields[selected].area ? \"\\n\" + i18n.t('fields.area', {\n        value: (parcelles.fields[selected].area / 10000).toFixed(2)\n      }) : '';\n      setLegend(\"\" + str_culture + str_area);\n    } else {\n      setLegend(i18n.t('fields.parcelles', {\n        value: parcelles.fields.length\n      }));\n    }\n  }, [selected]);\n  var polygons = useRef([]);\n\n  if (polygons.current.length !== parcelles.length) {\n    polygons.current = Array(parcelles.length).fill().map(function (_, i) {\n      return polygons.current[i] || createRef();\n    });\n  }\n\n  return React.createElement(SafeAreaView, {\n    style: styles.statusbar,\n    forceInset: {\n      top: 'always'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, React.createElement(StatusBar, {\n    translucent: true,\n    backgroundColor: \"transparent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), React.createElement(Header, {\n    style: styles.header,\n    androidStatusBarColor: COLORS.CYAN,\n    iosBarStyle: \"light-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, React.createElement(Left, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, parcelles && React.createElement(Button, {\n    transparent: true,\n    onPress: function onPress() {\n      return navigation.goBack();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, React.createElement(Icon, {\n    name: \"close\",\n    style: {\n      color: '#fff'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }))), React.createElement(Body, {\n    style: styles.headerBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, React.createElement(Title, {\n    style: styles.headerTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, i18n.t('fields.header'))), React.createElement(Right, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, React.createElement(MapView, {\n    provider: \"google\",\n    mapType: \"hybrid\",\n    initialRegion: getRegion(),\n    style: styles.map,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, parcelles.fields.map(function (field, idx) {\n    return React.createElement(Polygon, {\n      key: field.id,\n      strokeWidth: selected === idx ? 4 : 1,\n      strokeColor: selected === idx ? '#fff' : COLORS.DARK_GREEN,\n      fillColor: selected === idx ? COLORS.CYAN : COLORS.DEFAULT_FIELD_MY,\n      ref: function ref(_ref2) {\n        return polygons.current[idx] = _ref2;\n      },\n      onLayout: function onLayout() {\n        return polygons.current[idx].setNativeProps({\n          fillColor: selected === idx ? COLORS.CYAN : COLORS.DEFAULT_FIELD_MY\n        });\n      },\n      tappable: true,\n      onPress: function onPress() {\n        var i = idx;\n        var newValue = selected === i ? null : i;\n        setSelected(newValue);\n      },\n      coordinates: field.features.coordinates[0].map(function (coordinate) {\n        return {\n          latitude: coordinate[1],\n          longitude: coordinate[0]\n        };\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    });\n  })), React.createElement(View, {\n    style: styles.overlay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.overlayText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, legend))));\n};\n\nvar styles = StyleSheet.create({\n  header: {\n    backgroundColor: COLORS.CYAN\n  },\n  headerBody: {\n    flex: 4,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  headerTitle: {\n    color: '#fff',\n    fontFamily: 'nunito-regular',\n    fontSize: 20\n  },\n  statusbar: {\n    backgroundColor: 'black',\n    flex: 1\n  },\n  map: {\n    justifyContent: \"center\",\n    flexDirection: 'column',\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').width\n  },\n  container: {\n    justifyContent: 'center',\n    flex: 1,\n    display: 'flex',\n    paddingLeft: 15,\n    paddingRight: 15,\n    alignItems: 'center',\n    backgroundColor: COLORS.BEIGE\n  },\n  overlay: {\n    paddingHorizontal: 20,\n    paddingVertical: 15,\n    backgroundColor: '#fff',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: .2,\n    shadowRadius: 3,\n    elevation: 3,\n    width: Dimensions.get('window').width - 30,\n    top: -25\n  },\n  overlayText: {\n    fontSize: 16,\n    fontFamily: 'nunito-bold',\n    color: COLORS.DARK_GREEN\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    parcelles: state.metadata.parcelles\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, props) {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldsScreen);","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/screens/FieldsScreen.js"],"names":["React","useState","useEffect","useRef","createRef","MapView","Polygon","SafeAreaView","connect","Left","Right","Body","Title","Header","Button","Icon","COLORS","i18n","Amplitude","AMPLITUDE_EVENTS","ampEvent","fieldsScreen","FieldsScreen","navigation","parcelles","selected","setSelected","t","value","fields","length","legend","setLegend","logEventWithProperties","render","timestamp","Date","now","getRegion","center","longitude","region","lon_max","lon_min","latitude","lat_max","lat_min","r","longitudeDelta","Math","max","abs","latitudeDelta","str_culture","culture_name","str_area","area","toFixed","polygons","current","Array","fill","map","_","i","styles","statusbar","top","header","CYAN","flex","goBack","color","headerBody","headerTitle","container","field","idx","id","DARK_GREEN","DEFAULT_FIELD_MY","ref","setNativeProps","fillColor","newValue","features","coordinates","coordinate","overlay","overlayText","StyleSheet","create","backgroundColor","display","justifyContent","alignItems","fontFamily","fontSize","flexDirection","width","Dimensions","get","height","paddingLeft","paddingRight","BEIGE","paddingHorizontal","paddingVertical","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","mapStateToProps","state","metadata","mapDispatchToProps","dispatch","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, createRef } from 'react'\nimport  MapView, {Polygon} from 'react-native-maps';\n\nimport { SafeAreaView } from 'react-navigation';\nimport { Dimensions, StyleSheet, View, Text, StatusBar } from 'react-native';\nimport { connect } from 'react-redux';\nimport { Left, Right, Body, Title, Header, Button, Icon } from 'native-base';\n\nimport COLORS from '../colors';\nimport i18n from 'i18n-js';\n\nimport {Amplitude, AMPLITUDE_EVENTS} from '../amplitude'\nconst {fieldsScreen: ampEvent} = AMPLITUDE_EVENTS\n\nconst FieldsScreen = ({ navigation, parcelles }) => {\n  const [selected, setSelected] = useState(null)\n  const [legend, setLegend] = useState(i18n.t('fields.parcelles', { value: parcelles.fields.length }))\n\n  useEffect( () => {\n    // console.log(\"Amplitude : \", ampEvent.render)\n    Amplitude.logEventWithProperties(ampEvent.render, {\n      timestamp: Date.now()\n    })\n  }, [])\n\n  const getRegion = () => {\n    let center = {\n      longitude: (parcelles.region.lon_max - parcelles.region.lon_min) / 2 + parcelles.region.lon_min,\n      latitude: (parcelles.region.lat_max - parcelles.region.lat_min) / 2 + parcelles.region.lat_min,\n    }\n\n    let r = {\n      ...center,\n      longitudeDelta: Math.max(0.0222, Math.abs(parcelles.region.lon_max - center.longitude)),\n      latitudeDelta: Math.max(0.0121, Math.abs(parcelles.region.lat_max - center.latitude)),\n    }\n\n    return r\n  }\n\n  useEffect(() => {\n    if (selected !== null) {\n      const str_culture = i18n.t('fields.culture', { value: i18n.t(`cultures.${parcelles.fields[selected].culture_name}`)||i18n.t('fields.unknown') })\n      const str_area = parcelles.fields[selected].area ? `\\n${i18n.t('fields.area', {value: (parcelles.fields[selected].area / 10000).toFixed(2)})}`: ''\n      setLegend(`${str_culture}${str_area}`)\n    } else {\n      setLegend(i18n.t('fields.parcelles', { value: parcelles.fields.length }))\n    }\n  }, [selected])\n\n  const polygons = useRef([]);\n  if (polygons.current.length !== parcelles.length) {\n    polygons.current = Array(parcelles.length).fill().map((_, i) => polygons.current[i] || createRef())\n  }\n\n  return (\n    <SafeAreaView style={styles.statusbar} forceInset={{top:'always'}}>\n      <StatusBar translucent backgroundColor=\"transparent\" />\n        <Header style={styles.header} androidStatusBarColor={COLORS.CYAN} iosBarStyle=\"light-content\">\n          <Left style={{ flex: 1}}>\n            { parcelles && (\n              <Button transparent onPress={() => navigation.goBack()}>\n                <Icon name='close' style={{ color: '#fff' }} />\n              </Button>\n            )}\n          </Left>\n          <Body style={styles.headerBody}>\n            <Title style={styles.headerTitle}>{i18n.t('fields.header')}</Title>\n          </Body>\n          <Right style={{ flex: 1 }}></Right>\n        </Header>\n        \n        <View style={styles.container}>\n          <MapView\n            provider=\"google\"\n            mapType=\"hybrid\"\n            initialRegion={getRegion()}\n            style={styles.map}>\n\n            { parcelles.fields.map((field, idx) => {\n              return (\n                <Polygon\n                  key={field.id}\n                  strokeWidth={selected === idx ? 4 : 1}\n                  strokeColor={selected === idx ? '#fff' : COLORS.DARK_GREEN}\n                  fillColor={selected === idx ? COLORS.CYAN : COLORS.DEFAULT_FIELD_MY}\n                  ref={ref => (polygons.current[idx] = ref)}\n                  onLayout={() => polygons.current[idx].setNativeProps({\n                      fillColor: selected === idx ? COLORS.CYAN : COLORS.DEFAULT_FIELD_MY\n                  })}\n                  tappable={true}\n                  onPress={() => {\n                    let i = idx\n  \n                    let newValue = selected === i ? null : i\n                    setSelected(newValue)\n                  }}\n                  coordinates={field.features.coordinates[0].map((coordinate) => {\n                    return {\n                      latitude: coordinate[1],\n                      longitude: coordinate[0],\n                    }\n                  })}\n                />  \n              );\n            })}\n          </MapView>\n\n          <View style={styles.overlay}>\n            <Text style={styles.overlayText}>{legend}</Text>\n          </View>\n        </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    backgroundColor: COLORS.CYAN\n  },\n  headerBody: {\n    flex: 4,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  headerTitle: {\n    color: '#fff',\n    fontFamily: 'nunito-regular',\n    fontSize: 20\n  },  \n  statusbar: { backgroundColor: 'black', flex: 1 },\n  map: {\n    justifyContent :\"center\",\n    flexDirection: 'column',\n    width: Dimensions.get('window').width,\n    height : Dimensions.get('window').width,\n  },\n  container: { justifyContent: 'center', flex: 1, display: 'flex', paddingLeft: 15, paddingRight: 15, alignItems: 'center', backgroundColor : COLORS.BEIGE },\n  overlay: {\n    paddingHorizontal: 20,\n    paddingVertical: 15,\n    backgroundColor: '#fff',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: .2,\n    shadowRadius: 3,\n    elevation: 3,\n    width: Dimensions.get('window').width - 30,\n    top: -25,\n  },\n  overlayText: {\n    fontSize: 16,\n    fontFamily: 'nunito-bold',\n    color: COLORS.DARK_GREEN,\n  }\n});\n\n\nconst mapStateToProps = (state) => ({\n  parcelles: state.metadata.parcelles,\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldsScreen);"]},"metadata":{},"sourceType":"module"}