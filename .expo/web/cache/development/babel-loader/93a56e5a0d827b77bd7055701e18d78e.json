{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/meteo-detailed/Map.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useCallback, useRef, createRef } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport MapView, { Polygon } from 'react-native-maps';\nimport COLORS from \"../../colors\";\n\nvar Map = function Map(_ref) {\n  var region = _ref.region,\n      parcelles = _ref.parcelles,\n      selected = _ref.selected,\n      setSelected = _ref.setSelected,\n      currentData = _ref.currentData;\n  var getRegion = useCallback(function () {\n    var center = {\n      longitude: (region.lon_max - region.lon_min) / 2 + region.lon_min,\n      latitude: (region.lat_max - region.lat_min) / 2 + region.lat_min\n    };\n\n    var r = _objectSpread({}, center, {\n      longitudeDelta: Math.max(0.0222, Math.abs(region.lon_max - center.longitude)),\n      latitudeDelta: Math.max(0.0121, Math.abs(region.lat_max - center.latitude))\n    });\n\n    return r;\n  }, [region]);\n  var polygons = useRef([]);\n\n  if (polygons.current.length !== parcelles.length) {\n    polygons.current = Array(parcelles.length).fill().map(function (_, i) {\n      return polygons.current[i] || createRef();\n    });\n  }\n\n  return React.createElement(MapView, {\n    provider: \"google\",\n    mapType: \"hybrid\",\n    initialRegion: getRegion(),\n    style: styles.map,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, Object.values(parcelles).map(function (field, idx) {\n    return React.createElement(Polygon, {\n      key: field.id,\n      strokeWidth: selected === field.id ? 4 : 1,\n      strokeColor: selected === field.id ? '#fff' : COLORS.DARK_GREEN,\n      fillColor: COLORS[currentData[field.id].condition + \"_CARDS\"],\n      ref: function ref(_ref2) {\n        return polygons.current[idx] = _ref2;\n      },\n      onLayout: function onLayout() {\n        return polygons.current[idx].setNativeProps({\n          fillColor: COLORS[currentData[field.id].condition + \"_CARDS\"]\n        });\n      },\n      tappable: true,\n      onPress: function onPress() {\n        var i = field.id;\n        var newValue = selected === i ? null : i;\n        setSelected(newValue);\n      },\n      coordinates: field.features.coordinates[0].map(function (coordinate) {\n        return {\n          latitude: coordinate[1],\n          longitude: coordinate[0]\n        };\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    });\n  }));\n};\n\nvar styles = StyleSheet.create({\n  map: {\n    justifyContent: \"center\",\n    flexDirection: 'column',\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').width\n  }\n});\nexport default Map;","map":{"version":3,"sources":["/Users/Morgan/Programmation/Pro/Hygo/hygoclient/src/components/meteo-detailed/Map.js"],"names":["React","useCallback","useRef","createRef","MapView","Polygon","COLORS","Map","region","parcelles","selected","setSelected","currentData","getRegion","center","longitude","lon_max","lon_min","latitude","lat_max","lat_min","r","longitudeDelta","Math","max","abs","latitudeDelta","polygons","current","length","Array","fill","map","_","i","styles","Object","values","field","idx","id","DARK_GREEN","condition","ref","setNativeProps","fillColor","newValue","features","coordinates","coordinate","StyleSheet","create","justifyContent","flexDirection","width","Dimensions","get","height"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef, createRef } from \"react\";\nimport { StyleSheet, Dimensions } from 'react-native'\nimport  MapView, {Polygon} from 'react-native-maps';\n\nimport COLORS from '../../colors'\n\nconst Map = ({ region, parcelles, selected, setSelected, currentData }) => {\n  const getRegion = useCallback(() => {\n    let center = {\n      longitude: (region.lon_max - region.lon_min) / 2 + region.lon_min,\n      latitude: (region.lat_max - region.lat_min) / 2 + region.lat_min,\n    }\n\n    let r = {\n      ...center,\n      longitudeDelta: Math.max(0.0222, Math.abs(region.lon_max - center.longitude)),\n      latitudeDelta: Math.max(0.0121, Math.abs(region.lat_max - center.latitude)),\n    }\n\n    return r\n  }, [region])\n\n  const polygons = useRef([]);\n  if (polygons.current.length !== parcelles.length) {\n    polygons.current = Array(parcelles.length).fill().map((_, i) => polygons.current[i] || createRef())\n  }\n\n  return (\n    <MapView\n      provider=\"google\"\n      mapType=\"hybrid\"\n      initialRegion={getRegion()}\n      style={styles.map}>\n\n      { Object.values(parcelles).map((field, idx) => {\n        return (\n          <Polygon\n            key={field.id}\n            strokeWidth={selected === field.id ? 4 : 1}\n            strokeColor={selected === field.id ? '#fff' : COLORS.DARK_GREEN}\n            fillColor={COLORS[`${currentData[field.id].condition}_CARDS`]}\n            ref={ref => (polygons.current[idx] = ref)}\n            onLayout={() => polygons.current[idx].setNativeProps({\n                fillColor: COLORS[`${currentData[field.id].condition}_CARDS`]\n            })}\n            tappable={true}\n            onPress={() => {\n              let i = field.id\n\n              let newValue = selected === i ? null : i\n              setSelected(newValue)\n            }}\n            coordinates={field.features.coordinates[0].map((coordinate) => {\n              return {\n                latitude: coordinate[1],\n                longitude: coordinate[0],\n              }\n            })}\n          />  \n        );\n      })}\n    </MapView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  map: {\n    justifyContent: \"center\",\n    flexDirection: 'column',\n    width: Dimensions.get('window').width,\n    height : Dimensions.get('window').width,\n  },\n})\n\nexport default Map"]},"metadata":{},"sourceType":"module"}